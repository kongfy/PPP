=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 198, 230),
 (1, 67, 184),
 (2, 250, 260),
 (3, 17, 211),
 (4, 243, 233),
 (5, 3, 90)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 251, 264),
 (1, 123, 168),
 (2, 91, 224),
 (3, 0, 68),
 (4, 69, 225),
 (5, 236, 295),
 (6, 137, 194),
 (7, 206, 240),
 (8, 289, 28),
 (9, 195, 264),
 (10, 20, 72),
 (11, 144, 241),
 (12, 295, 3),
 (13, 80, 237),
 (14, 259, 20),
 (15, 149, 236),
 (16, 234, 79),
 (17, 26, 179),
 (18, 99, 190),
 (19, 92, 271),
 (20, 214, 100),
 (21, 67, 155),
 (22, 68, 292),
 (23, 81, 122),
 (24, 126, 57),
 (25, 75, 158),
 (26, 282, 33),
 (27, 55, 70),
 (28, 122, 297),
 (29, 261, 142),
 (30, 76, 232),
 (31, 3, 133),
 (32, 135, 30),
 (33, 183, 61),
 (34, 275, 28),
 (35, 58, 50),
 (36, 216, 294),
 (37, 258, 234),
 (38, 228, 34),
 (39, 175, 248),
 (40, 237, 156),
 (41, 81, 125),
 (42, 227, 116),
 (43, 52, 165),
 (44, 98, 10),
 (45, 23, 177),
 (46, 47, 254),
 (47, 222, 159),
 (48, 21, 51),
 (49, 197, 211)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.10057412390737924,
 0.10400482203701736,
 0.18653063739356252,
 0.19138871347755543,
 0.1726674517658251,
 0.13214068593524095,
 0.16784844747012301,
 0.18906382172342298,
 0.16045224485347206,
 0.17178173857462598,
 0.1455986022928038,
 0.19172671437526348,
 0.14646697310384638,
 0.14697276473340559,
 0.19501343331739673,
 0.11476452124898873,
 0.18657551017078827,
 0.15479079015061731,
 0.11840544035758044,
 0.16314147136153118,
 0.19477993766481219,
 0.17504578626159201,
 0.1288203276199793,
 0.13230130188862149,
 0.19425948857885872,
 0.14532811843697296,
 0.12266846078889682,
 0.12691081052329561,
 0.14083682149039767,
 0.12110654963727183,
 0.16423955041581045,
 0.16659666717035237,
 0.17594435893353216,
 0.12301717366408826,
 0.16188695282119228,
 0.13503430209842876,
 0.12474667687579644,
 0.18262184642937324,
 0.11593976820341263,
 0.13457740804399934,
 0.1383596429839799,
 0.11786727681051827,
 0.10264717615893727,
 0.13541157378493696,
 0.14879137242780843,
 0.11436202693840203,
 0.16990577413074731,
 0.14763173215473957,
 0.17661757303850337,
 0.15739299274889623]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1518447913430456,
 [(1, 67, 184), (0, 198, 230), (2, 250, 260), (4, 243, 233)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1518447913430456,
 [(1, 67, 184), (0, 198, 230), (2, 250, 260), (4, 243, 233)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.1518447913430456,
 [(1, 67, 184), (0, 198, 230), (2, 250, 260), (4, 243, 233)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2074669476805411,
 {(0, 198, 230): 4, (1, 67, 184): 4, (2, 250, 260): 4},
 [(1, 67, 184), (0, 198, 230), (2, 250, 260), (1, 67, 184), (0, 198, 230)],
 [4, 4, 4, 3, 1])
=============================================
#           result of greedy part  =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 113, 114),
 (1, 256, 237),
 (2, 264, 45),
 (3, 42, 243),
 (4, 155, 4),
 (5, 9, 225)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 5, 203),
 (1, 273, 10),
 (2, 68, 181),
 (3, 267, 241),
 (4, 75, 83),
 (5, 209, 63),
 (6, 147, 274),
 (7, 291, 16),
 (8, 114, 248),
 (9, 43, 67),
 (10, 92, 281),
 (11, 177, 139),
 (12, 207, 186),
 (13, 270, 226),
 (14, 246, 32),
 (15, 90, 37),
 (16, 72, 218),
 (17, 40, 132),
 (18, 202, 274),
 (19, 118, 196),
 (20, 240, 95),
 (21, 114, 6),
 (22, 250, 172),
 (23, 297, 16),
 (24, 296, 265),
 (25, 169, 164),
 (26, 202, 79),
 (27, 18, 281),
 (28, 53, 125),
 (29, 138, 70),
 (30, 73, 33),
 (31, 121, 160),
 (32, 256, 43),
 (33, 281, 179),
 (34, 23, 159),
 (35, 179, 271),
 (36, 120, 4),
 (37, 246, 21),
 (38, 132, 180),
 (39, 215, 30),
 (40, 13, 248),
 (41, 158, 282),
 (42, 9, 290),
 (43, 57, 22),
 (44, 84, 53),
 (45, 182, 260),
 (46, 224, 92),
 (47, 127, 46),
 (48, 137, 256),
 (49, 231, 257)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.1542107344736475,
 0.15057651975345052,
 0.14143476839885308,
 0.14110495591673128,
 0.18090066506761268,
 0.17128899623262137,
 0.10971337438232329,
 0.17346287770262442,
 0.12360801450278852,
 0.15083613424818448,
 0.17467758187782143,
 0.10190426166056489,
 0.19574516787476667,
 0.10061369229368371,
 0.1083566835272243,
 0.18996186751708349,
 0.19704453692373447,
 0.16753596473339713,
 0.15738437406792732,
 0.15913557786481908,
 0.1869187793526299,
 0.11302322410382776,
 0.17890728306679635,
 0.15728569279379268,
 0.18870589399148552,
 0.17101916936802136,
 0.16884844898662429,
 0.16588389526363539,
 0.15738348989942436,
 0.11330868840192282,
 0.15552872671086745,
 0.12739800173591551,
 0.16884497474017104,
 0.13160486978017302,
 0.16701825889725458,
 0.16225868322668302,
 0.10437540978773757,
 0.1364677190211496,
 0.1125907403183701,
 0.10548407658495938,
 0.12957974947609918,
 0.12625274937018621,
 0.1646172007451692,
 0.17194148770921547,
 0.16246908978051569,
 0.10540996046244687,
 0.12012896376070643,
 0.17970814233813565,
 0.12321001048048641,
 0.18660987602421095]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.92785400414843511,
 [(2, 264, 45), (1, 256, 237), (0, 113, 114), (5, 9, 225)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.92785400414843511,
 [(2, 264, 45), (1, 256, 237), (0, 113, 114), (5, 9, 225)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.92785400414843511,
 [(2, 264, 45), (1, 256, 237), (0, 113, 114), (5, 9, 225)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0368948571376531,
 {(0, 113, 114): 4, (1, 256, 237): 4, (2, 264, 45): 4},
 [(2, 264, 45), (1, 256, 237), (2, 264, 45), (0, 113, 114), (2, 264, 45)],
 [4, 4, 3, 4, 1])
=============================================
#           result of greedy part         =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 218, 11),
 (1, 28, 108),
 (2, 69, 215),
 (3, 48, 221),
 (4, 179, 21),
 (5, 18, 291)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 21, 139),
 (1, 196, 16),
 (2, 39, 224),
 (3, 277, 278),
 (4, 157, 250),
 (5, 18, 184),
 (6, 222, 168),
 (7, 262, 169),
 (8, 64, 0),
 (9, 101, 27),
 (10, 47, 195),
 (11, 108, 282),
 (12, 152, 66),
 (13, 119, 99),
 (14, 121, 69),
 (15, 256, 31),
 (16, 82, 14),
 (17, 239, 31),
 (18, 207, 48),
 (19, 43, 179),
 (20, 154, 91),
 (21, 185, 235),
 (22, 228, 265),
 (23, 159, 283),
 (24, 237, 10),
 (25, 66, 191),
 (26, 62, 289),
 (27, 137, 246),
 (28, 271, 232),
 (29, 119, 140),
 (30, 188, 221),
 (31, 57, 271),
 (32, 117, 45),
 (33, 2, 16),
 (34, 159, 9),
 (35, 1, 103),
 (36, 262, 123),
 (37, 251, 253),
 (38, 62, 16),
 (39, 165, 49),
 (40, 146, 157),
 (41, 207, 196),
 (42, 102, 230),
 (43, 59, 243),
 (44, 61, 191),
 (45, 251, 226),
 (46, 5, 34),
 (47, 120, 165),
 (48, 152, 58),
 (49, 294, 181)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.15381176008424649,
 0.13691906671658122,
 0.11007309453667385,
 0.10498797993789138,
 0.11132388911651599,
 0.19787703600543272,
 0.12288163519032369,
 0.12329667792127352,
 0.18203206838389729,
 0.1898330926272038,
 0.12178931663089698,
 0.11833071843934946,
 0.15068381859585647,
 0.16946546644096938,
 0.10703931795577896,
 0.10999368479498453,
 0.16933689052283205,
 0.14299642308481719,
 0.15100732964979782,
 0.18860847938591127,
 0.14140376355962742,
 0.17928605500810255,
 0.19788952379866553,
 0.16439698512644985,
 0.15742715917575772,
 0.19622233118450372,
 0.1352190881400207,
 0.10840976299628428,
 0.15096212864993405,
 0.18819458322956753,
 0.1046615072718578,
 0.15431513887942347,
 0.18117403883217262,
 0.18257939900176864,
 0.10547894496751214,
 0.16015740563707004,
 0.12766659978362757,
 0.1327031159378092,
 0.17360693912751618,
 0.18695955814024962,
 0.14901392386214357,
 0.16613805889124345,
 0.1686802661317876,
 0.10175535222832281,
 0.16660845196382934,
 0.17683041447867337,
 0.11218286305372831,
 0.15488716960274887,
 0.12915928776398736,
 0.17101599242711762]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1702868646336508,
 [(3, 48, 221), (2, 69, 215), (4, 179, 21), (0, 218, 11)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1702868646336508,
 [(3, 48, 221), (2, 69, 215), (4, 179, 21), (0, 218, 11)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.1702868646336508,
 [(3, 48, 221), (2, 69, 215), (4, 179, 21), (0, 218, 11)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2173654876670361,
 {(2, 69, 215): 4, (3, 48, 221): 4, (4, 179, 21): 4},
 [(3, 48, 221), (2, 69, 215), (4, 179, 21), (3, 48, 221), (3, 48, 221)],
 [4, 4, 4, 3, 1])
=============================================
#           result of greedy part           #
=================================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 1, 18),
 (1, 23, 218),
 (2, 119, 149),
 (3, 54, 164),
 (4, 220, 189),
 (5, 67, 176)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 51, 241),
 (1, 198, 117),
 (2, 253, 223),
 (3, 84, 231),
 (4, 272, 242),
 (5, 192, 157),
 (6, 269, 142),
 (7, 219, 107),
 (8, 189, 140),
 (9, 90, 279),
 (10, 278, 188),
 (11, 200, 122),
 (12, 6, 96),
 (13, 199, 291),
 (14, 266, 129),
 (15, 160, 119),
 (16, 195, 127),
 (17, 100, 78),
 (18, 251, 42),
 (19, 120, 13),
 (20, 269, 76),
 (21, 255, 77),
 (22, 70, 158),
 (23, 276, 152),
 (24, 5, 107),
 (25, 15, 207),
 (26, 273, 269),
 (27, 83, 92),
 (28, 276, 293),
 (29, 240, 201),
 (30, 145, 37),
 (31, 111, 66),
 (32, 169, 132),
 (33, 55, 127),
 (34, 181, 133),
 (35, 82, 73),
 (36, 39, 184),
 (37, 60, 288),
 (38, 257, 283),
 (39, 27, 128),
 (40, 180, 241),
 (41, 256, 125),
 (42, 294, 75),
 (43, 51, 239),
 (44, 38, 86),
 (45, 277, 243),
 (46, 45, 221),
 (47, 30, 45),
 (48, 150, 229),
 (49, 69, 103)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.16847068523690273,
 0.10634840574651024,
 0.17299077682410674,
 0.16415848835146668,
 0.10815440366016252,
 0.18090124563777529,
 0.12499937000493394,
 0.13524652100514345,
 0.12337590044601049,
 0.16090408686305394,
 0.17528461906819301,
 0.1427820442043386,
 0.1905348487818023,
 0.11273925719849553,
 0.14866059721188615,
 0.15402168820795836,
 0.10957999017130342,
 0.12633052022899807,
 0.17651159956786253,
 0.16402092892119813,
 0.14779717052755612,
 0.14987643850104757,
 0.1905209514975082,
 0.18525357070978016,
 0.18154332780247712,
 0.19730350133263055,
 0.16346515566070047,
 0.15222411821451495,
 0.17023621032426234,
 0.17175463794323709,
 0.18355706488149301,
 0.18023372335382359,
 0.15565060815682252,
 0.13023056909520134,
 0.11377943585403111,
 0.11707315544696043,
 0.13216892571768177,
 0.14004027803632144,
 0.16113896815377188,
 0.16442403693733368,
 0.16586060737607355,
 0.13516341164265289,
 0.16337535640901341,
 0.19885704173643418,
 0.15639727989629498,
 0.18221855282336744,
 0.13705516025569858,
 0.13355102278316464,
 0.19634013630607761,
 0.19158224156762599]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.0187178910259866,
 [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0187178910259866,
 [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.0187178910259866,
 [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0187178910259866,
 {(1, 23, 218): 4, (3, 54, 164): 4, (4, 220, 189): 4, (5, 67, 176): 4},
 [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part   =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 267, 161),
 (1, 276, 142),
 (2, 211, 14),
 (3, 165, 69),
 (4, 224, 78),
 (5, 58, 3)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 97, 258),
 (1, 37, 198),
 (2, 51, 243),
 (3, 37, 253),
 (4, 8, 50),
 (5, 16, 8),
 (6, 215, 12),
 (7, 40, 256),
 (8, 3, 58),
 (9, 23, 208),
 (10, 60, 132),
 (11, 49, 260),
 (12, 67, 90),
 (13, 230, 216),
 (14, 95, 34),
 (15, 176, 226),
 (16, 163, 4),
 (17, 3, 260),
 (18, 285, 199),
 (19, 294, 225),
 (20, 167, 239),
 (21, 230, 239),
 (22, 279, 98),
 (23, 26, 189),
 (24, 20, 67),
 (25, 225, 130),
 (26, 145, 242),
 (27, 261, 143),
 (28, 223, 275),
 (29, 113, 115),
 (30, 105, 143),
 (31, 213, 300),
 (32, 215, 100),
 (33, 126, 239),
 (34, 159, 38),
 (35, 229, 209),
 (36, 56, 231),
 (37, 57, 295),
 (38, 143, 45),
 (39, 91, 128),
 (40, 49, 283),
 (41, 1, 20),
 (42, 79, 256),
 (43, 202, 244),
 (44, 281, 277),
 (45, 205, 179),
 (46, 141, 174),
 (47, 269, 46),
 (48, 48, 126),
 (49, 17, 148)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.17189551700602082,
 0.15051543349524338,
 0.19382426643588552,
 0.18535194377743205,
 0.13144301955348808,
 0.19830250468905952,
 0.1854364728503862,
 0.11008848248613817,
 0.1814200092306601,
 0.11746918845070031,
 0.13636044499955169,
 0.15102744975473736,
 0.15874792640834876,
 0.14246086195919688,
 0.13217932097583351,
 0.1398635440575734,
 0.19711163682448216,
 0.13180426814268051,
 0.17619433961708703,
 0.10777347258519526,
 0.10904434842360482,
 0.11428539802710831,
 0.12684721539436766,
 0.15894907214939791,
 0.14591959568217941,
 0.1337872146117331,
 0.16450361781878714,
 0.18707054249520155,
 0.163178627583483,
 0.19732239661965972,
 0.15215697226715197,
 0.14812434794367874,
 0.15296529468501618,
 0.11668680155256028,
 0.11865022420765428,
 0.15002647401994124,
 0.16178591438509782,
 0.12735187225719738,
 0.15667542630136422,
 0.15549970117925555,
 0.19418618959780545,
 0.15222970698571112,
 0.15764447528284531,
 0.13026294724840801,
 0.10068857558638827,
 0.118451356778211,
 0.13745194987621073,
 0.10235424674877192,
 0.17828934463246091,
 0.16358091344984887]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.63740804102069459,
 [(0, 267, 161), (2, 211, 14), (1, 276, 142), (4, 224, 78)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.63740804102069459,
 [(0, 267, 161), (2, 211, 14), (1, 276, 142), (4, 224, 78)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.63740804102069459,
 [(0, 267, 161), (2, 211, 14), (1, 276, 142), (4, 224, 78)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.63740804102069459,
 {(0, 267, 161): 4, (1, 276, 142): 4, (2, 211, 14): 4, (4, 224, 78): 4},
 [(0, 267, 161), (2, 211, 14), (1, 276, 142), (4, 224, 78)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part         =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 159, 61),
 (1, 171, 89),
 (2, 197, 28),
 (3, 288, 137),
 (4, 113, 50),
 (5, 3, 164)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 86, 76),
 (1, 199, 74),
 (2, 171, 244),
 (3, 69, 195),
 (4, 149, 97),
 (5, 230, 225),
 (6, 31, 87),
 (7, 175, 29),
 (8, 246, 147),
 (9, 201, 59),
 (10, 174, 162),
 (11, 220, 265),
 (12, 239, 204),
 (13, 107, 72),
 (14, 267, 69),
 (15, 154, 63),
 (16, 147, 187),
 (17, 238, 74),
 (18, 28, 9),
 (19, 208, 190),
 (20, 260, 263),
 (21, 112, 229),
 (22, 170, 213),
 (23, 229, 274),
 (24, 201, 38),
 (25, 255, 254),
 (26, 245, 248),
 (27, 53, 2),
 (28, 105, 137),
 (29, 224, 16),
 (30, 116, 61),
 (31, 48, 92),
 (32, 179, 37),
 (33, 202, 95),
 (34, 134, 132),
 (35, 33, 262),
 (36, 275, 162),
 (37, 258, 86),
 (38, 5, 72),
 (39, 84, 88),
 (40, 182, 189),
 (41, 37, 85),
 (42, 78, 191),
 (43, 101, 140),
 (44, 85, 253),
 (45, 277, 188),
 (46, 107, 5),
 (47, 11, 190),
 (48, 142, 297),
 (49, 75, 207)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.15837687898065556,
 0.16472450405517763,
 0.15806135931336462,
 0.14219805248820894,
 0.12061028903480396,
 0.1923641854636319,
 0.17346076868315008,
 0.15691170648974906,
 0.15154692540137643,
 0.18218564610858412,
 0.14070328192708262,
 0.18930407409419492,
 0.1471302235923754,
 0.10215013346830536,
 0.1708263425364448,
 0.19724051057154524,
 0.10497751558518156,
 0.16997615669875421,
 0.1662642660066545,
 0.11698520723666839,
 0.18561450388305029,
 0.16165870882601924,
 0.18695047098081169,
 0.18195249699636001,
 0.11182239322232512,
 0.1987261880062981,
 0.10544671605107654,
 0.11198368751706583,
 0.13730531261061901,
 0.14547106174505231,
 0.197743849446925,
 0.15994579675222612,
 0.15053332890390944,
 0.19788880664325673,
 0.18153661096080326,
 0.11761793094318063,
 0.10766084346879004,
 0.11400882798105329,
 0.18341323149293839,
 0.17274011985997634,
 0.14337027971603888,
 0.11567542933276664,
 0.15357208989255045,
 0.15777079316451451,
 0.16883803315151838,
 0.15827724831875761,
 0.18184238022016497,
 0.10738284075088894,
 0.1767189348899299,
 0.10095194293935378]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.3011028258860151,
 [(0, 159, 61), (2, 197, 28), (1, 171, 89), (4, 113, 50)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.3011028258860151,
 [(0, 159, 61), (2, 197, 28), (1, 171, 89), (4, 113, 50)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.3011028258860151,
 [(0, 159, 61), (2, 197, 28), (1, 171, 89), (4, 113, 50)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.3011028258860151,
 {(0, 159, 61): 4, (1, 171, 89): 4, (2, 197, 28): 4, (4, 113, 50): 4},
 [(0, 159, 61), (2, 197, 28), (1, 171, 89), (4, 113, 50)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=====================================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 285, 114),
 (1, 286, 213),
 (2, 93, 183),
 (3, 211, 94),
 (4, 236, 61),
 (5, 18, 185)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 113, 246),
 (1, 213, 277),
 (2, 297, 239),
 (3, 8, 75),
 (4, 101, 156),
 (5, 27, 134),
 (6, 232, 44),
 (7, 223, 251),
 (8, 253, 135),
 (9, 248, 140),
 (10, 263, 50),
 (11, 138, 296),
 (12, 216, 8),
 (13, 251, 72),
 (14, 128, 74),
 (15, 24, 89),
 (16, 60, 48),
 (17, 19, 263),
 (18, 23, 45),
 (19, 93, 35),
 (20, 8, 192),
 (21, 114, 153),
 (22, 21, 128),
 (23, 231, 235),
 (24, 251, 190),
 (25, 256, 267),
 (26, 55, 94),
 (27, 287, 153),
 (28, 260, 115),
 (29, 257, 244),
 (30, 147, 282),
 (31, 124, 189),
 (32, 297, 40),
 (33, 61, 261),
 (34, 40, 221),
 (35, 123, 43),
 (36, 208, 102),
 (37, 91, 196),
 (38, 94, 136),
 (39, 155, 246),
 (40, 236, 56),
 (41, 170, 300),
 (42, 145, 89),
 (43, 166, 217),
 (44, 0, 249),
 (45, 180, 87),
 (46, 122, 181),
 (47, 194, 179),
 (48, 203, 241),
 (49, 43, 286)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.15571224178539589,
 0.10234120089374098,
 0.12518583047639881,
 0.19606880008980135,
 0.10892546873514015,
 0.10220595221934459,
 0.17318725954436578,
 0.1312743886021015,
 0.15739184645808676,
 0.12738877041279451,
 0.16423501164055312,
 0.17480496366221299,
 0.19343654687679457,
 0.17773353447069773,
 0.13868809766677487,
 0.17930904359864766,
 0.13974250627956217,
 0.11561928828252448,
 0.12323306285919645,
 0.16757849031784611,
 0.13217123567756078,
 0.16174207525750203,
 0.18489002245025393,
 0.14961937128565586,
 0.13908543133729928,
 0.1002187558359208,
 0.18879624153225033,
 0.15348539800353284,
 0.17109936928423164,
 0.17176700399311501,
 0.19827170655487747,
 0.10170872564982408,
 0.15349340338369116,
 0.15999000883356695,
 0.16850547256139148,
 0.1277044880212502,
 0.1578889277168635,
 0.17267407126175671,
 0.13383319046909201,
 0.19008025906388218,
 0.12019888696503961,
 0.1940281820098482,
 0.18824864641033495,
 0.17072064770043788,
 0.18431619712266425,
 0.16290218436514239,
 0.11856704477189416,
 0.14861282236102968,
 0.14124665758976165,
 0.1818909714757439]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.0783563414482864,
 [(4, 236, 61), (2, 93, 183), (3, 211, 94), (0, 285, 114)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0783563414482864,
 [(4, 236, 61), (2, 93, 183), (3, 211, 94), (0, 285, 114)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.0783563414482864,
 [(4, 236, 61), (2, 93, 183), (3, 211, 94), (0, 285, 114)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1986903447134558,
 {(2, 93, 183): 4, (3, 211, 94): 4, (4, 236, 61): 4},
 [(4, 236, 61), (2, 93, 183), (3, 211, 94), (4, 236, 61), (4, 236, 61)],
 [4, 4, 4, 3, 1])
=============================================
#           result of greedy part         =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 119, 284),
 (1, 82, 58),
 (2, 20, 3),
 (3, 270, 299),
 (4, 287, 171),
 (5, 133, 180)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 153, 100),
 (1, 166, 271),
 (2, 297, 270),
 (3, 263, 25),
 (4, 1, 73),
 (5, 110, 117),
 (6, 94, 229),
 (7, 188, 77),
 (8, 152, 281),
 (9, 10, 212),
 (10, 47, 202),
 (11, 93, 111),
 (12, 151, 150),
 (13, 57, 45),
 (14, 121, 153),
 (15, 215, 210),
 (16, 37, 258),
 (17, 226, 12),
 (18, 178, 9),
 (19, 94, 277),
 (20, 223, 223),
 (21, 2, 172),
 (22, 138, 268),
 (23, 189, 178),
 (24, 202, 106),
 (25, 253, 222),
 (26, 121, 236),
 (27, 220, 7),
 (28, 133, 205),
 (29, 195, 81),
 (30, 264, 277),
 (31, 4, 190),
 (32, 213, 3),
 (33, 171, 5),
 (34, 288, 60),
 (35, 91, 3),
 (36, 182, 283),
 (37, 39, 180),
 (38, 293, 176),
 (39, 64, 162),
 (40, 94, 31),
 (41, 67, 78),
 (42, 257, 154),
 (43, 244, 143),
 (44, 233, 299),
 (45, 270, 89),
 (46, 180, 18),
 (47, 51, 196),
 (48, 8, 211),
 (49, 126, 285)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.17473527291452001,
 0.15000981840795122,
 0.1335060155797623,
 0.10338552704853136,
 0.13811228038041798,
 0.10597323539974131,
 0.15955193941279616,
 0.19309244283094112,
 0.18903599209818708,
 0.14396995378593164,
 0.19589257782403516,
 0.10545988073802957,
 0.1962428985237038,
 0.14601895072024101,
 0.1481908790244291,
 0.10449865616508167,
 0.14265991024935645,
 0.16678975210081542,
 0.16888335536260385,
 0.15109304431973358,
 0.12197179051375764,
 0.19461835459732463,
 0.1392380868879029,
 0.15331810168638188,
 0.19539629491959895,
 0.13389735068291544,
 0.15998831008054784,
 0.17710003475015343,
 0.13746508283248604,
 0.19415875797791288,
 0.14393620031951851,
 0.16047677398727356,
 0.19168134485343113,
 0.13399438078523024,
 0.13030238864882593,
 0.18217504363760575,
 0.18798129145101747,
 0.15637532833826998,
 0.17417200583477993,
 0.12229633649834858,
 0.10819114935923368,
 0.12989539499824454,
 0.13681324536899817,
 0.1982042690096838,
 0.1405217387744665,
 0.19500530748719053,
 0.14088149397142147,
 0.10696769394740559,
 0.16937132414366157,
 0.10605316409415158]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.85732100407077705,
 [(0, 119, 284), (5, 133, 180), (1, 82, 58), (4, 287, 171)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.85732100407077705,
 [(0, 119, 284), (5, 133, 180), (1, 82, 58), (4, 287, 171)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.85732100407077705,
 [(0, 119, 284), (5, 133, 180), (1, 82, 58), (4, 287, 171)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.93667511695339023,
 {(0, 119, 284): 4, (1, 82, 58): 4, (5, 133, 180): 4},
 [(0, 119, 284), (0, 119, 284), (5, 133, 180), (1, 82, 58), (0, 119, 284)],
 [4, 3, 4, 4, 1])
=============================================
#           result of greedy part     =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 39, 25),
 (1, 68, 230),
 (2, 132, 159),
 (3, 24, 126),
 (4, 160, 69),
 (5, 161, 140)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 174, 125),
 (1, 281, 198),
 (2, 78, 249),
 (3, 217, 257),
 (4, 265, 160),
 (5, 191, 297),
 (6, 293, 83),
 (7, 7, 227),
 (8, 42, 74),
 (9, 245, 98),
 (10, 108, 55),
 (11, 201, 208),
 (12, 274, 44),
 (13, 222, 233),
 (14, 0, 45),
 (15, 148, 228),
 (16, 285, 288),
 (17, 70, 270),
 (18, 207, 259),
 (19, 137, 179),
 (20, 136, 264),
 (21, 59, 85),
 (22, 178, 4),
 (23, 251, 59),
 (24, 149, 64),
 (25, 258, 125),
 (26, 210, 107),
 (27, 53, 237),
 (28, 259, 227),
 (29, 215, 108),
 (30, 125, 134),
 (31, 46, 237),
 (32, 67, 157),
 (33, 144, 192),
 (34, 205, 1),
 (35, 258, 131),
 (36, 143, 223),
 (37, 293, 80),
 (38, 287, 108),
 (39, 47, 176),
 (40, 242, 87),
 (41, 174, 125),
 (42, 290, 230),
 (43, 129, 235),
 (44, 63, 93),
 (45, 64, 25),
 (46, 63, 230),
 (47, 0, 41),
 (48, 145, 40),
 (49, 172, 89)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.18333536350199714,
 0.13960404379013538,
 0.18420803671822517,
 0.16575569016539671,
 0.16202629864701062,
 0.17352366978264228,
 0.15210625731413849,
 0.17028896242789804,
 0.19892834670119705,
 0.19694193443424374,
 0.18785949210950506,
 0.17151383836385112,
 0.1271292607921701,
 0.12982261686179303,
 0.19689519620014251,
 0.1400332283858319,
 0.12593467689234561,
 0.1023845817476933,
 0.14070515752662649,
 0.13609620631785477,
 0.14755501015622013,
 0.10211609783663336,
 0.13541062560836006,
 0.17003164380676278,
 0.10778591897996326,
 0.17323251954956193,
 0.14084566582727071,
 0.10240773597442797,
 0.19322017191105673,
 0.16464685528020451,
 0.15101262478163852,
 0.13618509339454368,
 0.13041371174268651,
 0.10709766287947409,
 0.17721304503646779,
 0.16356583781707767,
 0.12787631676944597,
 0.19050252016379871,
 0.1422449051745362,
 0.10587019822186733,
 0.1317272539294648,
 0.13307857628410769,
 0.14168983345337927,
 0.1934402638632787,
 0.15805414918207664,
 0.16416077983815003,
 0.17608526164251506,
 0.15582541142870354,
 0.10079841679859219,
 0.13653195518753639]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 3, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1057855201064088,
 [(1, 68, 230), (4, 160, 69), (5, 161, 140), (2, 132, 159)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1057855201064088,
 [(1, 68, 230), (4, 160, 69), (5, 161, 140), (2, 132, 159)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.1057855201064088,
 [(1, 68, 230), (4, 160, 69), (5, 161, 140), (2, 132, 159)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.198087648056783,
 {(1, 68, 230): 4, (4, 160, 69): 4, (5, 161, 140): 4},
 [(1, 68, 230), (4, 160, 69), (1, 68, 230), (5, 161, 140), (1, 68, 230)],
 [4, 4, 3, 4, 1])
=============================================
#           result of greedy part       =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
6 chargers generated:
[(0, 131, 40),
 (1, 90, 144),
 (2, 294, 283),
 (3, 109, 213),
 (4, 56, 139),
 (5, 98, 29)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 107, 145),
 (1, 152, 171),
 (2, 283, 27),
 (3, 139, 217),
 (4, 272, 9),
 (5, 215, 176),
 (6, 178, 189),
 (7, 15, 202),
 (8, 4, 138),
 (9, 29, 185),
 (10, 90, 267),
 (11, 154, 22),
 (12, 126, 5),
 (13, 69, 272),
 (14, 130, 267),
 (15, 32, 73),
 (16, 176, 22),
 (17, 115, 238),
 (18, 89, 38),
 (19, 64, 77),
 (20, 280, 253),
 (21, 75, 241),
 (22, 255, 42),
 (23, 124, 185),
 (24, 15, 49),
 (25, 271, 162),
 (26, 182, 231),
 (27, 270, 178),
 (28, 90, 215),
 (29, 157, 78),
 (30, 250, 180),
 (31, 102, 225),
 (32, 21, 36),
 (33, 252, 203),
 (34, 74, 111),
 (35, 233, 299),
 (36, 49, 57),
 (37, 277, 130),
 (38, 65, 180),
 (39, 169, 209),
 (40, 74, 153),
 (41, 46, 15),
 (42, 259, 240),
 (43, 270, 269),
 (44, 151, 14),
 (45, 181, 292),
 (46, 27, 249),
 (47, 98, 196),
 (48, 118, 202),
 (49, 136, 238)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.12271381067854183,
 0.15700280747059162,
 0.10082458347429327,
 0.11079812114086619,
 0.12161964626237365,
 0.11513722141292022,
 0.135299915125564,
 0.16335197665058421,
 0.15579502508297216,
 0.13864961420410696,
 0.19550890028867546,
 0.17264815524719035,
 0.18887552277695169,
 0.19622605762587092,
 0.10083238072670626,
 0.15620243209707643,
 0.11218360842876123,
 0.16764654856336003,
 0.11089995048882478,
 0.18788164513909561,
 0.17507345000990704,
 0.1706880349461013,
 0.15914908712938006,
 0.16673050275053525,
 0.11168989353870543,
 0.13694324415845663,
 0.14347825526549735,
 0.16781955463069351,
 0.18212860008337878,
 0.16823431616143242,
 0.12290176586387996,
 0.13458621270290488,
 0.19067770831334563,
 0.16041546311725013,
 0.17050203128089514,
 0.10124994107543828,
 0.15094504611498261,
 0.14887098994081152,
 0.18428004579467733,
 0.10313494706967932,
 0.15807238318316247,
 0.16302392094496701,
 0.19538957917650379,
 0.15589956741460331,
 0.19302328744973574,
 0.12920433066374734,
 0.18662919266645353,
 0.18872922609260279,
 0.19220433294158157,
 0.11325984843942442]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.2803530593112764,
 [(3, 109, 213), (1, 90, 144), (4, 56, 139), (5, 98, 29)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2803530593112764,
 [(3, 109, 213), (1, 90, 144), (4, 56, 139), (5, 98, 29)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.2803530593112764,
 [(3, 109, 213), (1, 90, 144), (4, 56, 139), (5, 98, 29)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.4807862098702811,
 {(1, 90, 144): 4, (3, 109, 213): 4, (4, 56, 139): 4},
 [(3, 109, 213), (3, 109, 213), (1, 90, 144), (4, 56, 139), (3, 109, 213)],
 [4, 3, 4, 4, 1])
=============================================
#           result of greedy part           #
=============================================
(1.5313520613382532,
 {(0, 131, 40): 2, (1, 90, 144): 4, (3, 109, 213): 4},
 [(3, 109, 213),
  (3, 109, 213),
  (3, 109, 213),
  (1, 90, 144),
  (3, 109, 213),
  (0, 131, 40)],
 [4, 3, 2, 4, 1, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1833198348398197,
 [(0, 131, 40), (5, 98, 29), (1, 90, 144), (3, 109, 213), (4, 56, 139)],
 [2, 4, 4, 4, 2])
=============================================
#               random h list               #
=============================================
[0, 1, 2, 1, 0, 3]
=============================================
#               solution Ran                #
=============================================
(0.27145507436044025,
 [(1, 90, 144), (2, 294, 283), (3, 109, 213), (5, 98, 29)],
 [1, 2, 1, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.2803530593112764,
 [(1, 90, 144), (3, 109, 213), (4, 56, 139), (5, 98, 29)],
 [4, 4, 4, 4])
  #
=============================================
(0.64832743697611683,
 {(0, 267, 161): 4, (2, 211, 14): 4},
 [(0, 267, 161), (2, 211, 14), (2, 211, 14), (0, 267, 161), (2, 211, 14)],
 [4, 4, 3, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.63740804102069459,
 [(2, 211, 14), (1, 276, 142), (4, 224, 78), (0, 267, 161)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 4, 1, 3, 0, 1]
=============================================
#               solution Ran                #
=============================================
(0.37030660527852277,
 [(0, 267, 161), (1, 276, 142), (2, 211, 14), (3, 165, 69), (5, 58, 3)],
 [3, 4, 1, 3, 1])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.63740804102069459,
 [(0, 267, 161), (1, 276, 142), (2, 211, 14), (4, 224, 78)],
 [4, 4, 4, 4])
  #
=============================================
(1.1132373200582022,
 {(1, 256, 237): 4, (2, 264, 45): 4},
 [(2, 264, 45), (2, 264, 45), (1, 256, 237), (2, 264, 45), (1, 256, 237)],
 [4, 3, 4, 2, 3])
Warning: remaining budget can not be full filled.
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 650.000000
=============================================
#                solution B                 #
=============================================
(0.74347047119358878,
 [(0, 113, 114), (2, 264, 45), (1, 256, 237), (5, 9, 225)],
 [1, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 4, 3, 0, 3, 4]
=============================================
#               solution Ran                #
=============================================
(0.73963194902662632,
 [(0, 113, 114), (1, 256, 237), (2, 264, 45), (4, 155, 4), (5, 9, 225)],
 [2, 4, 3, 3, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.92785400414843511,
 [(0, 113, 114), (1, 256, 237), (2, 264, 45), (5, 9, 225)],
 [4, 4, 4, 4])
=====================================
(1.3391026738790635,
 {(0, 159, 61): 4, (2, 197, 28): 4},
 [(0, 159, 61), (0, 159, 61), (2, 197, 28), (2, 197, 28), (0, 159, 61)],
 [4, 3, 4, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.3011028258860151,
 [(4, 113, 50), (1, 171, 89), (2, 197, 28), (0, 159, 61)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 0, 2, 0, 4, 2]
=============================================
#               solution Ran                #
=============================================
(0.57998249770532784,
 [(0, 159, 61), (2, 197, 28), (4, 113, 50), (5, 3, 164)],
 [2, 2, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.3011028258860151,
 [(0, 159, 61), (1, 171, 89), (2, 197, 28), (4, 113, 50)],
 [4, 4, 4, 4])
=========================================
(1.2173654876670361,
 {(2, 69, 215): 4, (3, 48, 221): 4, (4, 179, 21): 4},
 [(3, 48, 221), (2, 69, 215), (3, 48, 221), (4, 179, 21), (3, 48, 221)],
 [4, 4, 3, 4, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1702868646336508,
 [(0, 218, 11), (4, 179, 21), (3, 48, 221), (2, 69, 215)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 0, 4, 1, 2, 4]
=============================================
#               solution Ran                #
=============================================
(0.62504966911501769,
 [(0, 218, 11), (2, 69, 215), (3, 48, 221), (4, 179, 21), (5, 18, 291)],
 [2, 4, 1, 2, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1702868646336508,
 [(0, 218, 11), (2, 69, 215), (3, 48, 221), (4, 179, 21)],
 [4, 4, 4, 4])
        #
=============================================
(1.0187178910259866,
 {(1, 23, 218): 4, (3, 54, 164): 4, (4, 220, 189): 4, (5, 67, 176): 4},
 [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
 [4, 4, 4, 4])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.0187178910259864,
 [(4, 220, 189), (3, 54, 164), (5, 67, 176), (1, 23, 218)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[0, 2, 2, 0, 3, 4]
=============================================
#               solution Ran                #
=============================================
(0.46319668971671907,
 [(1, 23, 218), (2, 119, 149), (4, 220, 189), (5, 67, 176)],
 [2, 2, 3, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.0187178910259866,
 [(1, 23, 218), (3, 54, 164), (4, 220, 189), (5, 67, 176)],
 [4, 4, 4, 4])
      #
=============================================
(0.93592937334392723,
 {(0, 119, 284): 4, (4, 287, 171): 2, (5, 133, 180): 4},
 [(0, 119, 284),
  (0, 119, 284),
  (0, 119, 284),
  (5, 133, 180),
  (0, 119, 284),
  (4, 287, 171)],
 [4, 3, 2, 4, 1, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.85732100407077705,
 [(0, 119, 284), (1, 82, 58), (5, 133, 180), (4, 287, 171)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 2, 1, 4, 2, 2]
=============================================
#               solution Ran                #
=============================================
(0.32840998629222995,
 [(0, 119, 284),
  (1, 82, 58),
  (2, 20, 3),
  (3, 270, 299),
  (4, 287, 171),
  (5, 133, 180)],
 [1, 2, 1, 4, 2, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.85732100407077705,
 [(0, 119, 284), (1, 82, 58), (4, 287, 171), (5, 133, 180)],
 [4, 4, 4, 4])
  #
=============================================
(1.2119561161606451,
 {(2, 93, 183): 4, (4, 236, 61): 4},
 [(4, 236, 61), (4, 236, 61), (2, 93, 183), (4, 236, 61), (2, 93, 183)],
 [4, 3, 4, 2, 3])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.06262129397292,
 [(4, 236, 61), (3, 211, 94), (2, 93, 183), (5, 18, 185)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 3, 2, 1, 1, 3]
=============================================
#               solution Ran                #
=============================================
(0.45886057060871577,
 [(0, 285, 114),
  (1, 286, 213),
  (2, 93, 183),
  (3, 211, 94),
  (4, 236, 61),
  (5, 18, 185)],
 [2, 3, 2, 1, 1, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.0783563414482864,
 [(0, 285, 114), (2, 93, 183), (3, 211, 94), (4, 236, 61)],
 [4, 4, 4, 4])
         #
=============================================
(1.2647353692185852,
 {(0, 198, 230): 4, (1, 67, 184): 4},
 [(1, 67, 184), (1, 67, 184), (0, 198, 230), (0, 198, 230), (1, 67, 184)],
 [4, 3, 4, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.095684417248131,
 [(5, 3, 90), (2, 250, 260), (1, 67, 184), (0, 198, 230)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 3, 1, 0, 0, 4]
=============================================
#               solution Ran                #
=============================================
(0.47621345221797978,
 [(0, 198, 230), (1, 67, 184), (2, 250, 260), (5, 3, 90)],
 [1, 3, 1, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1518447913430456,
 [(0, 198, 230), (1, 67, 184), (2, 250, 260), (4, 243, 233)],
 [4, 4, 4, 4])
    #
=============================================
(1.172862556739164,
 {(1, 68, 230): 4, (4, 160, 69): 4, (5, 161, 140): 2},
 [(1, 68, 230),
  (1, 68, 230),
  (1, 68, 230),
  (4, 160, 69),
  (1, 68, 230),
  (5, 161, 140)],
 [4, 3, 2, 4, 1, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1057855201064088,
 [(5, 161, 140), (1, 68, 230), (4, 160, 69), (2, 132, 159)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 0, 2, 2, 0, 1]
=============================================
#               solution Ran                #
=============================================
(0.18044190619020753,
 [(0, 39, 25), (2, 132, 159), (3, 24, 126), (5, 161, 140)],
 [3, 2, 2, 1])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1057855201064088,
 [(1, 68, 230), (2, 132, 159), (4, 160, 69), (5, 161, 140)],
 [4, 4, 4, 4])
{'B': 800,
 'M': 50,
 'N': 6,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
[{'A': (1.3011028258860151,
        [(0, 159, 61), (2, 197, 28), (1, 171, 89), (4, 113, 50)],
        [4, 4, 4, 4]),
  'B': (1.3011028258860151,
        [(4, 113, 50), (1, 171, 89), (2, 197, 28), (0, 159, 61)],
        [4, 4, 4, 4]),
  'Opt': (1.3011028258860151,
          [(0, 159, 61), (1, 171, 89), (2, 197, 28), (4, 113, 50)],
          [4, 4, 4, 4]),
  'Random': (0.57998249770532784,
             [(0, 159, 61), (2, 197, 28), (4, 113, 50), (5, 3, 164)],
             [2, 2, 4, 2])},
 {'A': (0.63740804102069459,
        [(0, 267, 161), (2, 211, 14), (1, 276, 142), (4, 224, 78)],
        [4, 4, 4, 4]),
  'B': (0.63740804102069459,
        [(2, 211, 14), (1, 276, 142), (4, 224, 78), (0, 267, 161)],
        [4, 4, 4, 4]),
  'Opt': (0.63740804102069459,
          [(0, 267, 161), (1, 276, 142), (2, 211, 14), (4, 224, 78)],
          [4, 4, 4, 4]),
  'Random': (0.37030660527852277,
             [(0, 267, 161),
              (1, 276, 142),
              (2, 211, 14),
              (3, 165, 69),
              (5, 58, 3)],
             [3, 4, 1, 3, 1])},
 {'A': (0.85732100407077705,
        [(0, 119, 284), (5, 133, 180), (1, 82, 58), (4, 287, 171)],
        [4, 4, 4, 4]),
  'B': (0.85732100407077705,
        [(0, 119, 284), (1, 82, 58), (5, 133, 180), (4, 287, 171)],
        [4, 4, 4, 4]),
  'Opt': (0.85732100407077705,
          [(0, 119, 284), (1, 82, 58), (4, 287, 171), (5, 133, 180)],
          [4, 4, 4, 4]),
  'Random': (0.32840998629222995,
             [(0, 119, 284),
              (1, 82, 58),
              (2, 20, 3),
              (3, 270, 299),
              (4, 287, 171),
              (5, 133, 180)],
             [1, 2, 1, 4, 2, 2])},
 {'A': (1.0187178910259866,
        [(4, 220, 189), (3, 54, 164), (1, 23, 218), (5, 67, 176)],
        [4, 4, 4, 4]),
  'B': (1.0187178910259864,
        [(4, 220, 189), (3, 54, 164), (5, 67, 176), (1, 23, 218)],
        [4, 4, 4, 4]),
  'Opt': (1.0187178910259866,
          [(1, 23, 218), (3, 54, 164), (4, 220, 189), (5, 67, 176)],
          [4, 4, 4, 4]),
  'Random': (0.46319668971671907,
             [(1, 23, 218), (2, 119, 149), (4, 220, 189), (5, 67, 176)],
             [2, 2, 3, 4])},
 {'A': (1.1057855201064088,
        [(1, 68, 230), (4, 160, 69), (5, 161, 140), (2, 132, 159)],
        [4, 4, 4, 4]),
  'B': (1.1057855201064088,
        [(5, 161, 140), (1, 68, 230), (4, 160, 69), (2, 132, 159)],
        [4, 4, 4, 4]),
  'Opt': (1.1057855201064088,
          [(1, 68, 230), (2, 132, 159), (4, 160, 69), (5, 161, 140)],
          [4, 4, 4, 4]),
  'Random': (0.18044190619020753,
             [(0, 39, 25), (2, 132, 159), (3, 24, 126), (5, 161, 140)],
             [3, 2, 2, 1])},
 {'A': (1.0783563414482864,
        [(4, 236, 61), (2, 93, 183), (3, 211, 94), (0, 285, 114)],
        [4, 4, 4, 4]),
  'B': (1.06262129397292,
        [(4, 236, 61), (3, 211, 94), (2, 93, 183), (5, 18, 185)],
        [4, 4, 4, 4]),
  'Opt': (1.0783563414482864,
          [(0, 285, 114), (2, 93, 183), (3, 211, 94), (4, 236, 61)],
          [4, 4, 4, 4]),
  'Random': (0.45886057060871577,
             [(0, 285, 114),
              (1, 286, 213),
              (2, 93, 183),
              (3, 211, 94),
              (4, 236, 61),
              (5, 18, 185)],
             [2, 3, 2, 1, 1, 3])},
 {'A': (1.1518447913430456,
        [(1, 67, 184), (0, 198, 230), (2, 250, 260), (4, 243, 233)],
        [4, 4, 4, 4]),
  'B': (1.095684417248131,
        [(5, 3, 90), (2, 250, 260), (1, 67, 184), (0, 198, 230)],
        [4, 4, 4, 4]),
  'Opt': (1.1518447913430456,
          [(0, 198, 230), (1, 67, 184), (2, 250, 260), (4, 243, 233)],
          [4, 4, 4, 4]),
  'Random': (0.47621345221797978,
             [(0, 198, 230), (1, 67, 184), (2, 250, 260), (5, 3, 90)],
             [1, 3, 1, 4])},
 {'A': (0.92785400414843511,
        [(2, 264, 45), (1, 256, 237), (0, 113, 114), (5, 9, 225)],
        [4, 4, 4, 4]),
  'B': (0.74347047119358878,
        [(0, 113, 114), (2, 264, 45), (1, 256, 237), (5, 9, 225)],
        [1, 4, 4, 4]),
  'Opt': (0.92785400414843511,
          [(0, 113, 114), (1, 256, 237), (2, 264, 45), (5, 9, 225)],
          [4, 4, 4, 4]),
  'Random': (0.73963194902662632,
             [(0, 113, 114),
              (1, 256, 237),
              (2, 264, 45),
              (4, 155, 4),
              (5, 9, 225)],
             [2, 4, 3, 3, 4])},
 {'A': (1.2803530593112764,
        [(3, 109, 213), (1, 90, 144), (4, 56, 139), (5, 98, 29)],
        [4, 4, 4, 4]),
  'B': (1.1833198348398197,
        [(0, 131, 40),
         (5, 98, 29),
         (1, 90, 144),
         (3, 109, 213),
         (4, 56, 139)],
        [2, 4, 4, 4, 2]),
  'Opt': (1.2803530593112764,
          [(1, 90, 144), (3, 109, 213), (4, 56, 139), (5, 98, 29)],
          [4, 4, 4, 4]),
  'Random': (0.27145507436044025,
             [(1, 90, 144), (2, 294, 283), (3, 109, 213), (5, 98, 29)],
             [1, 2, 1, 3])},
 {'A': (1.1702868646336508,
        [(3, 48, 221), (2, 69, 215), (4, 179, 21), (0, 218, 11)],
        [4, 4, 4, 4]),
  'B': (1.1702868646336508,
        [(0, 218, 11), (4, 179, 21), (3, 48, 221), (2, 69, 215)],
        [4, 4, 4, 4]),
  'Opt': (1.1702868646336508,
          [(0, 218, 11), (2, 69, 215), (3, 48, 221), (4, 179, 21)],
          [4, 4, 4, 4]),
  'Random': (0.62504966911501769,
             [(0, 218, 11),
              (2, 69, 215),
              (3, 48, 221),
              (4, 179, 21),
              (5, 18, 291)],
             [2, 4, 1, 2, 4])}]
{'A': 1.0529030342994576,
 'B': 1.0175718163997991,
 'Opt': 1.0529030342994576,
 'Random': 0.44935484005117871}
