=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 185, 247),
 (1, 8, 300),
 (2, 112, 122),
 (3, 195, 178),
 (4, 255, 148),
 (5, 17, 215),
 (6, 64, 69)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 201, 126),
 (1, 238, 35),
 (2, 164, 92),
 (3, 35, 110),
 (4, 281, 264),
 (5, 281, 18),
 (6, 269, 165),
 (7, 253, 207),
 (8, 232, 108),
 (9, 142, 184),
 (10, 113, 33),
 (11, 155, 17),
 (12, 227, 266),
 (13, 263, 116),
 (14, 66, 22),
 (15, 33, 287),
 (16, 147, 131),
 (17, 166, 21),
 (18, 3, 70),
 (19, 241, 64),
 (20, 229, 170),
 (21, 159, 11),
 (22, 196, 21),
 (23, 150, 227),
 (24, 130, 182),
 (25, 144, 51),
 (26, 295, 280),
 (27, 66, 252),
 (28, 289, 193),
 (29, 121, 73),
 (30, 159, 221),
 (31, 1, 89),
 (32, 287, 280),
 (33, 181, 39),
 (34, 291, 186),
 (35, 187, 125),
 (36, 256, 294),
 (37, 281, 284),
 (38, 4, 209),
 (39, 65, 33),
 (40, 65, 92),
 (41, 18, 233),
 (42, 62, 260),
 (43, 70, 46),
 (44, 84, 71),
 (45, 186, 189),
 (46, 162, 148),
 (47, 154, 111),
 (48, 154, 128),
 (49, 91, 271)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.16749010776443152,
 0.17275981025508208,
 0.10996443995944011,
 0.1276962338013386,
 0.13936233507511922,
 0.15302306864118864,
 0.11061533943062662,
 0.13823870269909747,
 0.12383742412076207,
 0.10463473529904832,
 0.13068404871009537,
 0.171681659984808,
 0.13296191341903651,
 0.10637114052734517,
 0.11095732796585175,
 0.19934502353696187,
 0.10636198610811831,
 0.1172184425235268,
 0.19916696051008626,
 0.15674547316358606,
 0.10381411785306134,
 0.10068815008033521,
 0.12194526861885592,
 0.10979826329176495,
 0.12424493589197907,
 0.11567306059451506,
 0.13453929240189394,
 0.14277043545757226,
 0.14621031569268411,
 0.17796506006938739,
 0.18357977658606017,
 0.1326978711403024,
 0.1536059570304642,
 0.18982613319674788,
 0.17456546386246818,
 0.15934421266089008,
 0.19072437982782448,
 0.1336836219395775,
 0.14101492604472263,
 0.15744653688212229,
 0.14671623363799333,
 0.10157669631483862,
 0.12498268921376,
 0.16909578260608471,
 0.11443829180197763,
 0.14055993989989113,
 0.12669098171220702,
 0.16069230840832477,
 0.16645573129568014,
 0.17992357214699048]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.0286139115022801,
 [(3, 195, 178), (6, 64, 69), (2, 112, 122), (4, 255, 148)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0286139115022801,
 [(3, 195, 178), (6, 64, 69), (2, 112, 122), (4, 255, 148)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.0286139115022801,
 [(3, 195, 178), (6, 64, 69), (2, 112, 122), (4, 255, 148)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0286139115022801,
 {(2, 112, 122): 4, (3, 195, 178): 4, (4, 255, 148): 4, (6, 64, 69): 4},
 [(3, 195, 178), (6, 64, 69), (2, 112, 122), (4, 255, 148)],
 [4, 4, 4, 4])
=============================================
#           result of=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 229, 247),
 (1, 70, 250),
 (2, 230, 80),
 (3, 55, 67),
 (4, 228, 9),
 (5, 49, 198),
 (6, 40, 267)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 163, 271),
 (1, 225, 114),
 (2, 34, 297),
 (3, 73, 155),
 (4, 159, 13),
 (5, 146, 208),
 (6, 102, 2),
 (7, 42, 131),
 (8, 291, 130),
 (9, 106, 92),
 (10, 298, 54),
 (11, 82, 274),
 (12, 220, 282),
 (13, 207, 12),
 (14, 254, 299),
 (15, 232, 105),
 (16, 194, 6),
 (17, 295, 62),
 (18, 173, 207),
 (19, 134, 26),
 (20, 246, 255),
 (21, 130, 213),
 (22, 56, 28),
 (23, 34, 262),
 (24, 21, 118),
 (25, 6, 12),
 (26, 290, 80),
 (27, 143, 239),
 (28, 84, 272),
 (29, 293, 22),
 (30, 215, 239),
 (31, 83, 89),
 (32, 202, 31),
 (33, 58, 31),
 (34, 159, 264),
 (35, 191, 72),
 (36, 154, 77),
 (37, 171, 272),
 (38, 7, 143),
 (39, 94, 243),
 (40, 270, 293),
 (41, 134, 163),
 (42, 73, 260),
 (43, 139, 179),
 (44, 36, 160),
 (45, 46, 238),
 (46, 136, 101),
 (47, 69, 276),
 (48, 193, 187),
 (49, 165, 117)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.12980612174625497,
 0.10229835064449155,
 0.14844047931411916,
 0.19062784818386114,
 0.1304192845084356,
 0.12933242536592698,
 0.18622545442608709,
 0.12243553075689312,
 0.12699180509135993,
 0.14080369223769593,
 0.18754347780054767,
 0.15127120900274735,
 0.16655837997189316,
 0.17102995866460785,
 0.11699427229020733,
 0.17246570758514104,
 0.14658096994353201,
 0.17568080689320043,
 0.11230622335731563,
 0.10324266252652335,
 0.18334831376409977,
 0.11253208107533638,
 0.1828686471694575,
 0.10936491289068181,
 0.13101491850492072,
 0.17627007546519563,
 0.19139695473514853,
 0.18224703761708239,
 0.10512497442839383,
 0.13107103331130632,
 0.15262035333556109,
 0.18542170737575059,
 0.16762220492319932,
 0.17270771182885108,
 0.15749219909078796,
 0.17691117292515773,
 0.13043659518858255,
 0.19880697158523641,
 0.14372383228842359,
 0.1460669005749374,
 0.19484062444080297,
 0.16682970130027625,
 0.17646503503193345,
 0.13489383960708565,
 0.18572473797774175,
 0.17002979083484135,
 0.12561958895474321,
 0.14862325525179312,
 0.16592741888950985,
 0.17222701214841402]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 3]
=============================================
#           result of greedy part           #
=============================================
(1.022709183200504,
 [(1, 70, 250), (0, 229, 247), (6, 40, 267), (2, 230, 80)],
 [4, 4, 3, 4])
=============================================
#           result of greedy part           #
=============================================
(1.022709183200504,
 [(1, 70, 250), (6, 40, 267), (0, 229, 247), (2, 230, 80)],
 [4, 3, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.022709183200504,
 [(1, 70, 250), (6, 40, 267), (0, 229, 247), (2, 230, 80)],
 [4, 3, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1755360860300217,
 {(0, 229, 247): 4, (1, 70, 250): 4, (6, 40, 267): 4},
 [(1, 70, 250), (6, 40, 267), (1, 70, 250), (0, 229, 247), (1, 70, 250)],
 [4, 4, 3, 4, 1])
=============================================
#           result of greed=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 120, 281),
 (1, 125, 160),
 (2, 244, 146),
 (3, 277, 162),
 (4, 253, 129),
 (5, 199, 17),
 (6, 85, 36)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 186, 26),
 (1, 76, 270),
 (2, 31, 260),
 (3, 225, 26),
 (4, 99, 147),
 (5, 31, 150),
 (6, 165, 207),
 (7, 25, 294),
 (8, 64, 221),
 (9, 1, 258),
 (10, 239, 263),
 (11, 291, 160),
 (12, 159, 191),
 (13, 269, 131),
 (14, 162, 202),
 (15, 75, 162),
 (16, 147, 157),
 (17, 268, 195),
 (18, 122, 37),
 (19, 63, 264),
 (20, 155, 191),
 (21, 23, 155),
 (22, 0, 201),
 (23, 208, 152),
 (24, 161, 158),
 (25, 243, 189),
 (26, 5, 213),
 (27, 71, 76),
 (28, 243, 36),
 (29, 35, 198),
 (30, 252, 98),
 (31, 283, 117),
 (32, 20, 147),
 (33, 87, 216),
 (34, 39, 116),
 (35, 276, 203),
 (36, 233, 42),
 (37, 185, 188),
 (38, 57, 26),
 (39, 143, 140),
 (40, 159, 23),
 (41, 2, 23),
 (42, 14, 270),
 (43, 180, 229),
 (44, 85, 143),
 (45, 148, 73),
 (46, 210, 2),
 (47, 281, 60),
 (48, 242, 140),
 (49, 24, 300)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.16120696657887351,
 0.17897775588818418,
 0.14736448564816076,
 0.19256056325669002,
 0.13972677842557135,
 0.18029457681050851,
 0.12826064486171584,
 0.14755934548610378,
 0.12333076497813926,
 0.12302854087305706,
 0.13817852080131182,
 0.14178130220170088,
 0.13989643960932344,
 0.19318409158586464,
 0.1603399527304207,
 0.19034585543995891,
 0.18785560143811877,
 0.13346514125326669,
 0.14977001902442777,
 0.16741505263360812,
 0.17186762728884447,
 0.14489546910288104,
 0.14409379271757489,
 0.12134094840655894,
 0.16421338365310612,
 0.16566887830554056,
 0.10214038518064444,
 0.11592443883255445,
 0.12983731660950726,
 0.18203285430627378,
 0.10085312626627946,
 0.1436536549995576,
 0.15537454103843704,
 0.11575132111065592,
 0.11576312537015047,
 0.14214110862886364,
 0.16867955825062592,
 0.16993700883898261,
 0.17030540443713377,
 0.14045938902367178,
 0.16716052595170078,
 0.11328074265678739,
 0.11279597985104421,
 0.18638055377736801,
 0.17912261802934204,
 0.14517565253646528,
 0.17127511682762556,
 0.13066420025769118,
 0.12589649104811151,
 0.1032978125524643]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1286658042863389,
 [(1, 125, 160), (2, 244, 146), (4, 253, 129), (3, 277, 162)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1286658042863389,
 [(1, 125, 160), (2, 244, 146), (4, 253, 129), (3, 277, 162)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.1286658042863389,
 [(1, 125, 160), (2, 244, 146), (4, 253, 129), (3, 277, 162)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1286658042863389,
 {(1, 125, 160): 4, (2, 244, 146): 4, (3, 277, 162): 4, (4, 253, 129): 4},
 [(1, 125, 160), (2, 244, 146), (4, 253, 129), (3, 277, 162)],
 [4, 4, 4, 4])
=============================================
#     =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 296, 196),
 (1, 202, 177),
 (2, 182, 12),
 (3, 17, 187),
 (4, 29, 204),
 (5, 262, 29),
 (6, 265, 52)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 67, 299),
 (1, 83, 6),
 (2, 36, 11),
 (3, 39, 118),
 (4, 36, 197),
 (5, 41, 132),
 (6, 213, 286),
 (7, 154, 116),
 (8, 123, 243),
 (9, 82, 59),
 (10, 288, 249),
 (11, 195, 146),
 (12, 102, 61),
 (13, 107, 160),
 (14, 152, 48),
 (15, 135, 77),
 (16, 187, 283),
 (17, 93, 48),
 (18, 187, 53),
 (19, 107, 286),
 (20, 26, 100),
 (21, 70, 200),
 (22, 299, 225),
 (23, 135, 223),
 (24, 135, 44),
 (25, 234, 165),
 (26, 131, 90),
 (27, 13, 183),
 (28, 255, 165),
 (29, 264, 249),
 (30, 130, 8),
 (31, 258, 91),
 (32, 228, 62),
 (33, 122, 12),
 (34, 247, 219),
 (35, 113, 4),
 (36, 30, 247),
 (37, 94, 140),
 (38, 31, 83),
 (39, 1, 113),
 (40, 281, 199),
 (41, 6, 208),
 (42, 148, 0),
 (43, 152, 99),
 (44, 287, 278),
 (45, 255, 146),
 (46, 262, 232),
 (47, 29, 208),
 (48, 179, 49),
 (49, 147, 171)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.15339064024184382,
 0.11885156803084401,
 0.19391405967378944,
 0.14884679990430646,
 0.1649314539393745,
 0.10087993786457276,
 0.17003335966281674,
 0.15411130051336988,
 0.12901188054476165,
 0.12459964443894868,
 0.12269005831565911,
 0.12615831496368865,
 0.13412204154730994,
 0.15020004136186127,
 0.15775665235872588,
 0.10267695554677003,
 0.1017797715087341,
 0.12980245388816339,
 0.17507494686297903,
 0.1197564581498432,
 0.11888960270717908,
 0.1468547503912834,
 0.13928233037995019,
 0.10009856429063511,
 0.16811263296514217,
 0.10563948402135397,
 0.18813265408648594,
 0.16755946757096923,
 0.1518342443240098,
 0.14652111515359045,
 0.10055821133309606,
 0.17777673652504386,
 0.11430953849202077,
 0.10108159885419329,
 0.15105171796335792,
 0.15115853520696354,
 0.11204874724394388,
 0.18904411849488836,
 0.1418689499513841,
 0.12235349286270124,
 0.13497182336192792,
 0.14225621131820726,
 0.11581204144148854,
 0.17979062889379396,
 0.16519187506477417,
 0.15284721541337082,
 0.14791676122581859,
 0.13927584144790248,
 0.15875210203665419,
 0.10991073189636925]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.067912462063999,
 [(4, 29, 204), (3, 17, 187), (0, 296, 196), (2, 182, 12)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.067912462063999,
 [(4, 29, 204), (3, 17, 187), (0, 296, 196), (2, 182, 12)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.067912462063999,
 [(4, 29, 204), (3, 17, 187), (0, 296, 196), (2, 182, 12)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1880667235178552,
 {(0, 296, 196): 4, (3, 17, 187): 4, (4, 29, 204): 4},
 [(4, 29, 204), (3, 17, 187), (4, 29, 204), (0, 296, 196), (4, 29, 204)],
 [4, 4, 3, 4, 1])
=============================================
#           result of greedy pa=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 45, 109),
 (1, 209, 29),
 (2, 172, 148),
 (3, 207, 191),
 (4, 154, 237),
 (5, 99, 131),
 (6, 205, 156)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 155, 230),
 (1, 117, 282),
 (2, 297, 15),
 (3, 22, 118),
 (4, 136, 125),
 (5, 33, 16),
 (6, 260, 84),
 (7, 166, 87),
 (8, 234, 278),
 (9, 98, 285),
 (10, 57, 24),
 (11, 161, 157),
 (12, 65, 249),
 (13, 105, 108),
 (14, 244, 263),
 (15, 221, 140),
 (16, 210, 35),
 (17, 236, 200),
 (18, 84, 194),
 (19, 191, 29),
 (20, 186, 290),
 (21, 153, 221),
 (22, 110, 121),
 (23, 41, 153),
 (24, 244, 183),
 (25, 56, 277),
 (26, 117, 171),
 (27, 121, 42),
 (28, 37, 284),
 (29, 110, 245),
 (30, 177, 65),
 (31, 47, 279),
 (32, 190, 42),
 (33, 65, 27),
 (34, 234, 232),
 (35, 274, 148),
 (36, 140, 264),
 (37, 113, 20),
 (38, 297, 264),
 (39, 121, 229),
 (40, 188, 267),
 (41, 254, 216),
 (42, 181, 215),
 (43, 216, 45),
 (44, 224, 177),
 (45, 74, 96),
 (46, 30, 72),
 (47, 39, 144),
 (48, 280, 239),
 (49, 61, 296)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.13691832071478061,
 0.16522200436868717,
 0.18108770394677687,
 0.16417558487929135,
 0.12943308429370484,
 0.19902286275327316,
 0.1626393204107659,
 0.13928026168055604,
 0.18739683051946635,
 0.13953658135552938,
 0.13972953448649608,
 0.14574781594739317,
 0.18815660272501972,
 0.16972835054811558,
 0.1200818983977353,
 0.16704852578343365,
 0.10307209977027884,
 0.10335586040233871,
 0.15261636830549311,
 0.17381136860814478,
 0.18778792568287112,
 0.17828175675316404,
 0.16868476631730839,
 0.16047989104017751,
 0.10265358281874494,
 0.118026957110623,
 0.13467988226622832,
 0.1446574541682325,
 0.1330368908084347,
 0.18729283169787342,
 0.18099796268538682,
 0.10256655592055834,
 0.14706081707487109,
 0.1649653243575577,
 0.13592754895081721,
 0.15141882321799016,
 0.19633101718801146,
 0.16297318348096607,
 0.10542080049359279,
 0.17975625316177277,
 0.13198652191410334,
 0.11626767105676947,
 0.19751711306687147,
 0.10726202591190091,
 0.14149191078270956,
 0.11295521166353162,
 0.12044927429670246,
 0.11644714561799874,
 0.15290544885618901,
 0.19490532195701765]
=============================================
#           optimal power levels            #
=============================================
[3, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.2221363726528447,
 [(4, 154, 237), (1, 209, 29), (3, 207, 191), (5, 99, 131)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2221363726528447,
 [(4, 154, 237), (1, 209, 29), (3, 207, 191), (5, 99, 131)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.2221363726528447,
 [(4, 154, 237), (1, 209, 29), (3, 207, 191), (5, 99, 131)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2221363726528447,
 {(1, 209, 29): 4, (3, 207, 191): 4, (4, 154, 237): 4, (5, 99, 131): 4},
 [(4, 154, 237), (1, 209, 29), (3, 207, 191), (5, 99, 131)],
 [4, 4, 4, 4])
=============================================
#         =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 24, 138),
 (1, 181, 47),
 (2, 190, 279),
 (3, 88, 11),
 (4, 101, 90),
 (5, 119, 151),
 (6, 261, 119)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 122, 27),
 (1, 212, 160),
 (2, 194, 10),
 (3, 288, 232),
 (4, 8, 228),
 (5, 2, 97),
 (6, 271, 232),
 (7, 224, 14),
 (8, 138, 46),
 (9, 80, 177),
 (10, 262, 280),
 (11, 272, 100),
 (12, 62, 178),
 (13, 250, 290),
 (14, 144, 281),
 (15, 230, 136),
 (16, 53, 89),
 (17, 269, 182),
 (18, 300, 7),
 (19, 29, 85),
 (20, 76, 187),
 (21, 248, 168),
 (22, 290, 135),
 (23, 284, 86),
 (24, 215, 199),
 (25, 153, 32),
 (26, 88, 163),
 (27, 26, 139),
 (28, 163, 89),
 (29, 145, 226),
 (30, 85, 51),
 (31, 160, 156),
 (32, 114, 22),
 (33, 279, 3),
 (34, 83, 19),
 (35, 99, 214),
 (36, 222, 186),
 (37, 116, 237),
 (38, 2, 230),
 (39, 143, 40),
 (40, 264, 198),
 (41, 74, 182),
 (42, 295, 51),
 (43, 293, 248),
 (44, 273, 262),
 (45, 8, 293),
 (46, 86, 226),
 (47, 131, 211),
 (48, 226, 80),
 (49, 143, 216)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.16850439657135868,
 0.10475295234977139,
 0.14006583753320662,
 0.12577529911446586,
 0.11095185046145022,
 0.17786232662217649,
 0.19814359170266152,
 0.16771201549894421,
 0.17947548099569782,
 0.11790002008293428,
 0.11357936214678609,
 0.15365885817929328,
 0.12275077222474576,
 0.17623430069260518,
 0.10206672281807021,
 0.12623109958063214,
 0.18110373897749329,
 0.16246554503103158,
 0.17540961105025271,
 0.18980922200450895,
 0.17477738331282167,
 0.14430565115429045,
 0.12911531183577019,
 0.13674327778971157,
 0.16262364963247689,
 0.11450255912709932,
 0.15513972228948175,
 0.15583893047613073,
 0.11032055184763936,
 0.18873916269890925,
 0.16531455891895497,
 0.18688360319842776,
 0.13781589674594552,
 0.18332320005132366,
 0.11970808766500676,
 0.14448990242566462,
 0.10188488985767095,
 0.12642855370245518,
 0.17571649848378468,
 0.19487270547307806,
 0.1241467723499225,
 0.17761043314497238,
 0.19795938142875102,
 0.18863251605515113,
 0.14003793857290786,
 0.11509915555431775,
 0.14649409879064737,
 0.18807572688679541,
 0.13140327235002167,
 0.10364655777718951]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.90817527224978756,
 [(0, 24, 138), (6, 261, 119), (3, 88, 11), (5, 119, 151)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.90817527224978756,
 [(0, 24, 138), (6, 261, 119), (3, 88, 11), (5, 119, 151)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.90817527224978756,
 [(0, 24, 138), (6, 261, 119), (3, 88, 11), (5, 119, 151)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.90817527224978756,
 {(0, 24, 138): 4, (3, 88, 11): 4, (5, 119, 151): 4, (6, 261, 119): 4},
 [(0, 24, 138), (6, 261, 119), (3, 88, 11), (5, 119, 151)],
 [4, 4, 4, 4])
=============================================
#           resul=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 153, 110),
 (1, 224, 101),
 (2, 121, 177),
 (3, 206, 22),
 (4, 45, 297),
 (5, 286, 191),
 (6, 72, 82)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 226, 206),
 (1, 212, 143),
 (2, 181, 163),
 (3, 98, 219),
 (4, 55, 153),
 (5, 161, 101),
 (6, 9, 171),
 (7, 114, 101),
 (8, 297, 114),
 (9, 253, 92),
 (10, 6, 172),
 (11, 286, 178),
 (12, 53, 233),
 (13, 213, 1),
 (14, 96, 240),
 (15, 142, 217),
 (16, 240, 53),
 (17, 148, 124),
 (18, 142, 177),
 (19, 241, 248),
 (20, 172, 246),
 (21, 97, 160),
 (22, 96, 41),
 (23, 226, 287),
 (24, 66, 85),
 (25, 166, 46),
 (26, 68, 27),
 (27, 225, 251),
 (28, 216, 73),
 (29, 248, 134),
 (30, 174, 248),
 (31, 70, 54),
 (32, 47, 40),
 (33, 245, 277),
 (34, 100, 140),
 (35, 285, 173),
 (36, 62, 200),
 (37, 184, 75),
 (38, 12, 275),
 (39, 103, 271),
 (40, 112, 186),
 (41, 91, 300),
 (42, 299, 279),
 (43, 252, 205),
 (44, 299, 204),
 (45, 177, 40),
 (46, 150, 163),
 (47, 144, 246),
 (48, 264, 175),
 (49, 35, 68)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.19137010438354576,
 0.103357262992675,
 0.17396087946353767,
 0.15738913946012967,
 0.17158161111068509,
 0.11578580129911636,
 0.1324842801441824,
 0.10152629071780342,
 0.17764708697487194,
 0.1126775345546271,
 0.15601821451514322,
 0.16564807232695095,
 0.1755807244653243,
 0.1586834995856885,
 0.10670426434656258,
 0.12110295690328374,
 0.18533419551969499,
 0.19447788797078047,
 0.15062890541235879,
 0.1364611241973393,
 0.1777418123685777,
 0.10818680146880472,
 0.11874893854001708,
 0.18878669696871464,
 0.12217201111222582,
 0.15714174517506338,
 0.10131833890841066,
 0.12749295323605794,
 0.17566940429240102,
 0.13141084019307381,
 0.16142341792448386,
 0.19995820108602122,
 0.18484780429488376,
 0.15454832143211514,
 0.19167173221776707,
 0.17180292686129428,
 0.19278420876785496,
 0.14839886841777999,
 0.15110560042294999,
 0.11702561540876959,
 0.17963930613713505,
 0.12304079268507062,
 0.10552361057176429,
 0.17186949362031489,
 0.18327142273216793,
 0.16994528395258957,
 0.12346052462328061,
 0.1278028828185791,
 0.1417002310778851,
 0.15927829628271142]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.2387606545313494,
 [(2, 121, 177), (0, 153, 110), (5, 286, 191), (6, 72, 82)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2387606545313494,
 [(2, 121, 177), (0, 153, 110), (5, 286, 191), (6, 72, 82)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.2387606545313494,
 [(2, 121, 177), (0, 153, 110), (5, 286, 191), (6, 72, 82)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2387606545313494,
 {(0, 153, 110): 4, (2, 121, 177): 4, (5, 286, 191): 4, (6, 72, 82): 4},
 [(2, 121, 177), (0, 153, 110), (5, 286, 191), (6, 72, 82)],
 [4, 4, 4, 4])
=============================================
#           resu=============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 154, 88),
 (1, 67, 93),
 (2, 36, 266),
 (3, 285, 112),
 (4, 234, 264),
 (5, 270, 232),
 (6, 119, 243)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 257, 120),
 (1, 232, 66),
 (2, 1, 66),
 (3, 51, 29),
 (4, 82, 21),
 (5, 152, 237),
 (6, 239, 53),
 (7, 276, 260),
 (8, 268, 34),
 (9, 292, 150),
 (10, 126, 83),
 (11, 59, 94),
 (12, 103, 170),
 (13, 108, 108),
 (14, 104, 21),
 (15, 198, 99),
 (16, 213, 150),
 (17, 254, 12),
 (18, 229, 294),
 (19, 76, 64),
 (20, 15, 160),
 (21, 136, 94),
 (22, 253, 61),
 (23, 145, 256),
 (24, 250, 177),
 (25, 266, 282),
 (26, 280, 106),
 (27, 294, 136),
 (28, 228, 232),
 (29, 48, 46),
 (30, 81, 4),
 (31, 182, 297),
 (32, 240, 220),
 (33, 191, 204),
 (34, 177, 198),
 (35, 183, 107),
 (36, 231, 185),
 (37, 219, 260),
 (38, 252, 258),
 (39, 26, 57),
 (40, 241, 39),
 (41, 86, 207),
 (42, 286, 264),
 (43, 116, 198),
 (44, 178, 36),
 (45, 37, 113),
 (46, 73, 124),
 (47, 215, 43),
 (48, 142, 131),
 (49, 105, 133)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.10316925114754383,
 0.12070738537142427,
 0.14606542516408735,
 0.10431991026521036,
 0.15330708313882813,
 0.18050730685817851,
 0.10342430843875922,
 0.17954000705256895,
 0.10686446575728346,
 0.13513389165863016,
 0.19006007932593466,
 0.1645001942894021,
 0.19859323699911519,
 0.19792708297997627,
 0.18882641698637342,
 0.16864579543443464,
 0.18104866241645098,
 0.16067473367847096,
 0.13008034807676516,
 0.18629751806273465,
 0.19330157000020359,
 0.11682152164334182,
 0.12222302163332167,
 0.14570511956360988,
 0.17823151107580609,
 0.16960651650170633,
 0.15816408145504141,
 0.18498466511578029,
 0.10717343954036643,
 0.16697803011440013,
 0.17182510002744844,
 0.15528700459962344,
 0.15072231561097918,
 0.18781152656838207,
 0.19890499033047057,
 0.1786623072414022,
 0.1276043410116067,
 0.1906430838953701,
 0.13448521453153842,
 0.1675342619647589,
 0.10877331361025909,
 0.13741305767930873,
 0.15541481091121104,
 0.17814818368216911,
 0.1205384651077209,
 0.15577804963797745,
 0.15908374298100683,
 0.11848058006678464,
 0.18262823078711116,
 0.14862712859911903]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1764093711434809,
 [(1, 67, 93), (4, 234, 264), (3, 285, 112), (0, 154, 88)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1764093711434809,
 [(1, 67, 93), (4, 234, 264), (3, 285, 112), (0, 154, 88)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.1764093711434809,
 [(1, 67, 93), (4, 234, 264), (3, 285, 112), (0, 154, 88)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1764093711434809,
 {(0, 154, 88): 4, (1, 67, 93): 4, (3, 285, 112): 4, (4, 234, 264): 4},
 [(1, 67, 93), (4, 234, 264), (3, 285, 112), (0, 154, 88)],
 [4, 4, 4, 4])
=============================================
#           result =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 217, 203),
 (1, 101, 79),
 (2, 6, 51),
 (3, 38, 174),
 (4, 263, 3),
 (5, 295, 41),
 (6, 140, 215)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 152, 269),
 (1, 168, 96),
 (2, 142, 285),
 (3, 256, 128),
 (4, 139, 31),
 (5, 293, 204),
 (6, 0, 115),
 (7, 160, 80),
 (8, 191, 192),
 (9, 109, 17),
 (10, 177, 140),
 (11, 47, 42),
 (12, 81, 45),
 (13, 148, 239),
 (14, 78, 26),
 (15, 227, 6),
 (16, 224, 154),
 (17, 100, 261),
 (18, 197, 196),
 (19, 178, 276),
 (20, 78, 15),
 (21, 246, 235),
 (22, 178, 40),
 (23, 108, 116),
 (24, 101, 100),
 (25, 298, 230),
 (26, 213, 263),
 (27, 215, 239),
 (28, 259, 71),
 (29, 234, 237),
 (30, 205, 50),
 (31, 63, 165),
 (32, 39, 107),
 (33, 27, 134),
 (34, 272, 123),
 (35, 269, 201),
 (36, 259, 132),
 (37, 50, 216),
 (38, 222, 78),
 (39, 245, 167),
 (40, 71, 300),
 (41, 296, 207),
 (42, 227, 251),
 (43, 44, 158),
 (44, 240, 83),
 (45, 149, 146),
 (46, 73, 178),
 (47, 257, 214),
 (48, 244, 78),
 (49, 175, 242)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.18515780833501758,
 0.18590785944313765,
 0.19951741336689807,
 0.10478663144642822,
 0.12661480132518591,
 0.17405082386895787,
 0.15601966960527811,
 0.17128408596812567,
 0.12349988061447743,
 0.18518181144444801,
 0.14667209715248375,
 0.13700381654003574,
 0.11502759078518381,
 0.12713487778993293,
 0.17957803953493018,
 0.13182914062114498,
 0.1215306814701619,
 0.10293887092508307,
 0.14548721215427077,
 0.18281693034920071,
 0.19614707959056024,
 0.1462577062154013,
 0.14506862758129951,
 0.12721248322354095,
 0.17305411637131934,
 0.17020305386229834,
 0.18108140986715709,
 0.1391687082143882,
 0.1954110023961845,
 0.1422501749349577,
 0.11223501164964571,
 0.11739307108026424,
 0.18448452720775846,
 0.17132383150910163,
 0.11262419601622309,
 0.15452730502371179,
 0.11460549137835811,
 0.15720644400550346,
 0.12982213620091604,
 0.13788772269056193,
 0.11263103266471472,
 0.19300827323355119,
 0.13350443852676441,
 0.19103931913207581,
 0.12707729016992556,
 0.13091623465281066,
 0.13142788819728735,
 0.18524304074756279,
 0.14928005796957489,
 0.10871309463041912]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.99714127019104182,
 [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.99714127019104182,
 [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.99714127019104182,
 [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0506137729268465,
 {(0, 217, 203): 4, (1, 101, 79): 4, (3, 38, 174): 4},
 [(0, 217, 203), (1, 101, 79), (0, 217, 203), (3, 38, 174), (3, 38, 174)],
 [4, 4, 3, 4, 1])
=============================================
#         =============================================
#                  args                     #
=============================================
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
7 chargers generated:
[(0, 283, 33),
 (1, 110, 32),
 (2, 220, 279),
 (3, 165, 1),
 (4, 117, 238),
 (5, 261, 262),
 (6, 268, 257)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 281, 243),
 (1, 85, 14),
 (2, 120, 218),
 (3, 55, 249),
 (4, 93, 153),
 (5, 41, 186),
 (6, 213, 284),
 (7, 213, 161),
 (8, 24, 283),
 (9, 111, 246),
 (10, 300, 85),
 (11, 72, 189),
 (12, 122, 117),
 (13, 146, 233),
 (14, 259, 73),
 (15, 246, 61),
 (16, 188, 16),
 (17, 58, 283),
 (18, 1, 284),
 (19, 15, 71),
 (20, 22, 85),
 (21, 296, 13),
 (22, 240, 50),
 (23, 105, 91),
 (24, 122, 225),
 (25, 155, 139),
 (26, 45, 206),
 (27, 1, 10),
 (28, 85, 236),
 (29, 235, 230),
 (30, 93, 291),
 (31, 69, 222),
 (32, 172, 231),
 (33, 81, 115),
 (34, 207, 32),
 (35, 151, 92),
 (36, 147, 44),
 (37, 233, 153),
 (38, 128, 103),
 (39, 51, 261),
 (40, 145, 183),
 (41, 233, 105),
 (42, 285, 275),
 (43, 79, 53),
 (44, 222, 295),
 (45, 275, 66),
 (46, 132, 42),
 (47, 235, 98),
 (48, 9, 105),
 (49, 284, 71)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.18091092871923023,
 0.18254758869025486,
 0.11392461566671061,
 0.16665100398418936,
 0.15200943832983621,
 0.14594991841022542,
 0.10677395639870831,
 0.10290071546172852,
 0.14719775858599815,
 0.1728067462484123,
 0.14330049524712188,
 0.14542065487611486,
 0.10442580869052737,
 0.12199818472231477,
 0.10931266749609524,
 0.19503965641783491,
 0.14539631076719145,
 0.17320829250199118,
 0.18776446757758244,
 0.10335384182082925,
 0.18804481612107493,
 0.19933038020260779,
 0.14953522704957253,
 0.12776513030137027,
 0.18090541430211959,
 0.18485684768339106,
 0.11447416804706909,
 0.1681167965148786,
 0.19000917993023436,
 0.10597898422673017,
 0.13471820404857607,
 0.18590130914027955,
 0.10395667946034828,
 0.17864842455886104,
 0.12374215216480589,
 0.19588306506173614,
 0.14784393133945256,
 0.10540854872925215,
 0.13029978447624066,
 0.17352373274076155,
 0.14646541395580803,
 0.1895807480643108,
 0.13346182191870509,
 0.19018682825061181,
 0.13748885189262355,
 0.11488291186501692,
 0.1641344483831918,
 0.15274252336016142,
 0.10784849884335662,
 0.1622550331725556]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 3, 4]
=============================================
#           result of greedy part           #
=============================================
(0.99772523588716944,
 [(4, 117, 238), (0, 283, 33), (2, 220, 279), (1, 110, 32)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.99772523588716944,
 [(4, 117, 238), (0, 283, 33), (2, 220, 279), (1, 110, 32)],
 [4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.99772523588716944,
 [(4, 117, 238), (0, 283, 33), (2, 220, 279), (1, 110, 32)],
 [4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1357674971768941,
 {(0, 283, 33): 4, (2, 220, 279): 4, (4, 117, 238): 4},
 [(4, 117, 238), (4, 117, 238), (0, 283, 33), (2, 220, 279), (4, 117, 238)],
 [4, 3, 4, 4, 1])
=============================================
#           resrt           #
=============================================
(1.2688220154863237,
 {(3, 17, 187): 4, (4, 29, 204): 4},
 [(4, 29, 204), (4, 29, 204), (4, 29, 204), (3, 17, 187), (3, 17, 187)],
 [4, 3, 2, 4, 3])
Warning: remaining budget can not be full filled.
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 650.000000
=============================================
#                solution B                 #
=============================================
(0.87476952929993024,
 [(1, 202, 177), (3, 17, 187), (4, 29, 204), (0, 296, 196)],
 [1, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 1, 1, 0, 4, 4, 0]
=============================================
#               solution Ran                #
=============================================
(0.44456405374990293,
 [(0, 296, 196), (1, 202, 177), (2, 182, 12), (4, 29, 204), (5, 262, 29)],
 [2, 1, 1, 4, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.067912462063999,
 [(0, 296, 196), (2, 182, 12), (3, 17, 187), (4, 29, 204)],
 [4, 4, 4, 4])
of greedy part           #
=============================================
(1.2305246208657783,
 {(1, 67, 93): 4, (4, 234, 264): 4},
 [(1, 67, 93), (4, 234, 264), (1, 67, 93), (4, 234, 264), (4, 234, 264)],
 [4, 4, 3, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1764093711434809,
 [(1, 67, 93), (0, 154, 88), (4, 234, 264), (3, 285, 112)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[0, 1, 4, 1, 1, 0, 3]
=============================================
#               solution Ran                #
=============================================
(0.17846276110856102,
 [(1, 67, 93), (2, 36, 266), (3, 285, 112), (4, 234, 264), (6, 119, 243)],
 [1, 4, 1, 1, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1764093711434809,
 [(0, 154, 88), (1, 67, 93), (3, 285, 112), (4, 234, 264)],
 [4, 4, 4, 4])
      result of greedy part           #
=============================================
(1.1328523467051548,
 {(1, 125, 160): 4, (2, 244, 146): 4, (4, 253, 129): 4},
 [(1, 125, 160), (1, 125, 160), (2, 244, 146), (4, 253, 129), (4, 253, 129)],
 [3, 4, 4, 4, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1232493509490062,
 [(4, 253, 129), (5, 199, 17), (1, 125, 160), (2, 244, 146)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 0, 4, 3, 4, 0, 2]
=============================================
#               solution Ran                #
=============================================
(0.81718096679186791,
 [(0, 120, 281), (2, 244, 146), (3, 277, 162), (4, 253, 129), (6, 85, 36)],
 [3, 4, 3, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1286658042863389,
 [(1, 125, 160), (2, 244, 146), (3, 277, 162), (4, 253, 129)],
 [4, 4, 4, 4])
y part           #
=============================================
(1.2567568129259195,
 {(1, 70, 250): 4, (6, 40, 267): 4},
 [(1, 70, 250), (1, 70, 250), (1, 70, 250), (6, 40, 267), (6, 40, 267)],
 [4, 3, 2, 3, 4])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.0311637466253813,
 [(6, 40, 267), (4, 228, 9), (1, 70, 250), (0, 229, 247)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 3, 4, 0, 1, 4, 1]
=============================================
#               solution Ran                #
=============================================
(0.81718166704671924,
 [(0, 229, 247),
  (1, 70, 250),
  (2, 230, 80),
  (4, 228, 9),
  (5, 49, 198),
  (6, 40, 267)],
 [3, 3, 4, 1, 4, 1])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.0953775987585017,
 [(0, 229, 247), (1, 70, 250), (2, 230, 80), (6, 40, 267)],
 [4, 4, 4, 4])
t of greedy part           #
=============================================
(0.8945253168196996,
 {(0, 24, 138): 4, (3, 88, 11): 4, (6, 261, 119): 4},
 [(0, 24, 138), (6, 261, 119), (3, 88, 11), (0, 24, 138), (0, 24, 138)],
 [4, 4, 4, 3, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.90817527224978756,
 [(6, 261, 119), (5, 119, 151), (0, 24, 138), (3, 88, 11)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[4, 1, 3, 0, 4, 1, 3]
=============================================
#               solution Ran                #
=============================================
(0.59657567176173676,
 [(0, 24, 138),
  (1, 181, 47),
  (2, 190, 279),
  (4, 101, 90),
  (5, 119, 151),
  (6, 261, 119)],
 [4, 1, 3, 4, 1, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.90817527224978756,
 [(0, 24, 138), (3, 88, 11), (5, 119, 151), (6, 261, 119)],
 [4, 4, 4, 4])
ult of greedy part           #
=============================================
(1.14791070710018,
 {(0, 283, 33): 4, (4, 117, 238): 4},
 [(4, 117, 238),
  (4, 117, 238),
  (4, 117, 238),
  (0, 283, 33),
  (4, 117, 238),
  (0, 283, 33)],
 [4, 3, 2, 4, 1, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.96480506374232833,
 [(2, 220, 279), (4, 117, 238), (6, 268, 257), (0, 283, 33)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 4, 3, 4, 2, 0, 0]
=============================================
#               solution Ran                #
=============================================
(0.71088592690394259,
 [(0, 283, 33), (1, 110, 32), (2, 220, 279), (3, 165, 1), (4, 117, 238)],
 [3, 4, 3, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.99772523588716944,
 [(0, 283, 33), (1, 110, 32), (2, 220, 279), (4, 117, 238)],
 [4, 4, 4, 4])
  result of greedy part           #
=============================================
(1.2844244900267756,
 {(1, 209, 29): 4, (4, 154, 237): 4},
 [(4, 154, 237), (4, 154, 237), (1, 209, 29), (4, 154, 237), (1, 209, 29)],
 [4, 3, 4, 2, 3])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.1733943515385032,
 [(4, 154, 237), (5, 99, 131), (1, 209, 29), (2, 172, 148)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[4, 3, 2, 3, 0, 0, 1]
=============================================
#               solution Ran                #
=============================================
(0.64256177826025984,
 [(0, 45, 109), (1, 209, 29), (2, 172, 148), (3, 207, 191), (6, 205, 156)],
 [4, 3, 2, 3, 1])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.2221363726528447,
 [(1, 209, 29), (3, 207, 191), (4, 154, 237), (5, 99, 131)],
 [4, 4, 4, 4])
lt of greedy part           #
=============================================
(1.2429682730817129,
 {(0, 153, 110): 4, (2, 121, 177): 4, (5, 286, 191): 4},
 [(2, 121, 177), (2, 121, 177), (0, 153, 110), (5, 286, 191), (5, 286, 191)],
 [4, 3, 4, 4, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(1.2387606545313494,
 [(5, 286, 191), (2, 121, 177), (0, 153, 110), (6, 72, 82)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 0, 0, 0, 0, 3, 2]
=============================================
#               solution Ran                #
=============================================
(0.40040846280820575, [(0, 153, 110), (5, 286, 191), (6, 72, 82)], [2, 3, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.2387606545313494,
 [(0, 153, 110), (2, 121, 177), (5, 286, 191), (6, 72, 82)],
 [4, 4, 4, 4])
  result of greedy part           #
=============================================
(1.1037616259245664,
 {(0, 217, 203): 4, (1, 101, 79): 4, (3, 38, 174): 3},
 [(0, 217, 203), (0, 217, 203), (0, 217, 203), (1, 101, 79), (3, 38, 174)],
 [4, 3, 2, 4, 3])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.99714127019104182,
 [(1, 101, 79), (6, 140, 215), (3, 38, 174), (0, 217, 203)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[0, 0, 4, 4, 1, 4, 3]
=============================================
#               solution Ran                #
=============================================
(0.45890895646077756,
 [(2, 6, 51), (3, 38, 174), (4, 263, 3), (5, 295, 41), (6, 140, 215)],
 [4, 4, 1, 4, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.99714127019104182,
 [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
 [4, 4, 4, 4])
 greedy part           #
=============================================
(1.0755308147353111,
 {(3, 195, 178): 4, (6, 64, 69): 4},
 [(3, 195, 178), (6, 64, 69), (6, 64, 69), (3, 195, 178), (6, 64, 69)],
 [4, 4, 3, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 800.000000
=============================================
#                solution B                 #
=============================================
(0.96517372511983834,
 [(5, 17, 215), (4, 255, 148), (6, 64, 69), (3, 195, 178)],
 [4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 3, 3, 1, 4, 0, 2]
=============================================
#               solution Ran                #
=============================================
(0.5894628859564518,
 [(0, 185, 247),
  (1, 8, 300),
  (2, 112, 122),
  (3, 195, 178),
  (4, 255, 148),
  (6, 64, 69)],
 [3, 3, 3, 1, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.0286139115022801,
 [(2, 112, 122), (3, 195, 178), (4, 255, 148), (6, 64, 69)],
 [4, 4, 4, 4])
{'B': 800,
 'M': 50,
 'N': 7,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
[{'A': (0.99714127019104182,
        [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
        [4, 4, 4, 4]),
  'B': (0.99714127019104182,
        [(1, 101, 79), (6, 140, 215), (3, 38, 174), (0, 217, 203)],
        [4, 4, 4, 4]),
  'Opt': (0.99714127019104182,
          [(0, 217, 203), (1, 101, 79), (3, 38, 174), (6, 140, 215)],
          [4, 4, 4, 4]),
  'Random': (0.45890895646077756,
             [(2, 6, 51),
              (3, 38, 174),
              (4, 263, 3),
              (5, 295, 41),
              (6, 140, 215)],
             [4, 4, 1, 4, 3])},
 {'A': (1.067912462063999,
        [(4, 29, 204), (3, 17, 187), (0, 296, 196), (2, 182, 12)],
        [4, 4, 4, 4]),
  'B': (0.87476952929993024,
        [(1, 202, 177), (3, 17, 187), (4, 29, 204), (0, 296, 196)],
        [1, 4, 4, 4]),
  'Opt': (1.067912462063999,
          [(0, 296, 196), (2, 182, 12), (3, 17, 187), (4, 29, 204)],
          [4, 4, 4, 4]),
  'Random': (0.44456405374990293,
             [(0, 296, 196),
              (1, 202, 177),
              (2, 182, 12),
              (4, 29, 204),
              (5, 262, 29)],
             [2, 1, 1, 4, 4])},
 {'A': (0.99772523588716944,
        [(4, 117, 238), (0, 283, 33), (2, 220, 279), (1, 110, 32)],
        [4, 4, 4, 4]),
  'B': (0.96480506374232833,
        [(2, 220, 279), (4, 117, 238), (6, 268, 257), (0, 283, 33)],
        [4, 4, 4, 4]),
  'Opt': (0.99772523588716944,
          [(0, 283, 33), (1, 110, 32), (2, 220, 279), (4, 117, 238)],
          [4, 4, 4, 4]),
  'Random': (0.71088592690394259,
             [(0, 283, 33),
              (1, 110, 32),
              (2, 220, 279),
              (3, 165, 1),
              (4, 117, 238)],
             [3, 4, 3, 4, 2])},
 {'A': (0.90817527224978756,
        [(0, 24, 138), (6, 261, 119), (3, 88, 11), (5, 119, 151)],
        [4, 4, 4, 4]),
  'B': (0.90817527224978756,
        [(6, 261, 119), (5, 119, 151), (0, 24, 138), (3, 88, 11)],
        [4, 4, 4, 4]),
  'Opt': (0.90817527224978756,
          [(0, 24, 138), (3, 88, 11), (5, 119, 151), (6, 261, 119)],
          [4, 4, 4, 4]),
  'Random': (0.59657567176173676,
             [(0, 24, 138),
              (1, 181, 47),
              (2, 190, 279),
              (4, 101, 90),
              (5, 119, 151),
              (6, 261, 119)],
             [4, 1, 3, 4, 1, 3])},
 {'A': (1.2387606545313494,
        [(2, 121, 177), (0, 153, 110), (5, 286, 191), (6, 72, 82)],
        [4, 4, 4, 4]),
  'B': (1.2387606545313494,
        [(5, 286, 191), (2, 121, 177), (0, 153, 110), (6, 72, 82)],
        [4, 4, 4, 4]),
  'Opt': (1.2387606545313494,
          [(0, 153, 110), (2, 121, 177), (5, 286, 191), (6, 72, 82)],
          [4, 4, 4, 4]),
  'Random': (0.40040846280820575,
             [(0, 153, 110), (5, 286, 191), (6, 72, 82)],
             [2, 3, 2])},
 {'A': (1.1764093711434809,
        [(1, 67, 93), (4, 234, 264), (3, 285, 112), (0, 154, 88)],
        [4, 4, 4, 4]),
  'B': (1.1764093711434809,
        [(1, 67, 93), (0, 154, 88), (4, 234, 264), (3, 285, 112)],
        [4, 4, 4, 4]),
  'Opt': (1.1764093711434809,
          [(0, 154, 88), (1, 67, 93), (3, 285, 112), (4, 234, 264)],
          [4, 4, 4, 4]),
  'Random': (0.17846276110856102,
             [(1, 67, 93),
              (2, 36, 266),
              (3, 285, 112),
              (4, 234, 264),
              (6, 119, 243)],
             [1, 4, 1, 1, 3])},
 {'A': (1.022709183200504,
        [(1, 70, 250), (6, 40, 267), (0, 229, 247), (2, 230, 80)],
        [4, 3, 4, 4]),
  'B': (1.0311637466253813,
        [(6, 40, 267), (4, 228, 9), (1, 70, 250), (0, 229, 247)],
        [4, 4, 4, 4]),
  'Opt': (1.0953775987585017,
          [(0, 229, 247), (1, 70, 250), (2, 230, 80), (6, 40, 267)],
          [4, 4, 4, 4]),
  'Random': (0.81718166704671924,
             [(0, 229, 247),
              (1, 70, 250),
              (2, 230, 80),
              (4, 228, 9),
              (5, 49, 198),
              (6, 40, 267)],
             [3, 3, 4, 1, 4, 1])},
 {'A': (1.0286139115022801,
        [(3, 195, 178), (6, 64, 69), (2, 112, 122), (4, 255, 148)],
        [4, 4, 4, 4]),
  'B': (0.96517372511983834,
        [(5, 17, 215), (4, 255, 148), (6, 64, 69), (3, 195, 178)],
        [4, 4, 4, 4]),
  'Opt': (1.0286139115022801,
          [(2, 112, 122), (3, 195, 178), (4, 255, 148), (6, 64, 69)],
          [4, 4, 4, 4]),
  'Random': (0.5894628859564518,
             [(0, 185, 247),
              (1, 8, 300),
              (2, 112, 122),
              (3, 195, 178),
              (4, 255, 148),
              (6, 64, 69)],
             [3, 3, 3, 1, 4, 2])},
 {'A': (1.2221363726528447,
        [(4, 154, 237), (1, 209, 29), (3, 207, 191), (5, 99, 131)],
        [4, 4, 4, 4]),
  'B': (1.1733943515385032,
        [(4, 154, 237), (5, 99, 131), (1, 209, 29), (2, 172, 148)],
        [4, 4, 4, 4]),
  'Opt': (1.2221363726528447,
          [(1, 209, 29), (3, 207, 191), (4, 154, 237), (5, 99, 131)],
          [4, 4, 4, 4]),
  'Random': (0.64256177826025984,
             [(0, 45, 109),
              (1, 209, 29),
              (2, 172, 148),
              (3, 207, 191),
              (6, 205, 156)],
             [4, 3, 2, 3, 1])},
 {'A': (1.1286658042863389,
        [(1, 125, 160), (2, 244, 146), (4, 253, 129), (3, 277, 162)],
        [4, 4, 4, 4]),
  'B': (1.1232493509490062,
        [(4, 253, 129), (5, 199, 17), (1, 125, 160), (2, 244, 146)],
        [4, 4, 4, 4]),
  'Opt': (1.1286658042863389,
          [(1, 125, 160), (2, 244, 146), (3, 277, 162), (4, 253, 129)],
          [4, 4, 4, 4]),
  'Random': (0.81718096679186791,
             [(0, 120, 281),
              (2, 244, 146),
              (3, 277, 162),
              (4, 253, 129),
              (6, 85, 36)],
             [3, 4, 3, 4, 2])}]
{'A': 1.0788249537708796,
 'B': 1.0453042335390648,
 'Opt': 1.0860917953266793,
 'Random': 0.56561931308484259}
