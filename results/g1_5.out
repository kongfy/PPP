=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 180, 221),
 (1, 115, 296),
 (2, 91, 162),
 (3, 200, 27),
 (4, 173, 155),
 (5, 49, 84),
 (6, 280, 108),
 (7, 89, 70)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 147, 265),
 (1, 114, 84),
 (2, 258, 227),
 (3, 175, 289),
 (4, 57, 75),
 (5, 67, 220),
 (6, 189, 293),
 (7, 38, 149),
 (8, 31, 130),
 (9, 211, 110),
 (10, 185, 139),
 (11, 272, 163),
 (12, 219, 262),
 (13, 29, 1),
 (14, 152, 62),
 (15, 207, 138),
 (16, 16, 148),
 (17, 124, 153),
 (18, 94, 104),
 (19, 214, 89),
 (20, 266, 31),
 (21, 139, 186),
 (22, 72, 82),
 (23, 132, 45),
 (24, 91, 139),
 (25, 23, 118),
 (26, 76, 88),
 (27, 265, 208),
 (28, 232, 184),
 (29, 78, 226),
 (30, 46, 184),
 (31, 166, 38),
 (32, 177, 87),
 (33, 53, 258),
 (34, 187, 242),
 (35, 98, 98),
 (36, 118, 60),
 (37, 188, 1),
 (38, 167, 104),
 (39, 118, 6),
 (40, 190, 51),
 (41, 175, 218),
 (42, 120, 152),
 (43, 135, 213),
 (44, 36, 155),
 (45, 74, 130),
 (46, 179, 223),
 (47, 220, 158),
 (48, 96, 17),
 (49, 118, 183)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.11591760715598778,
 0.18005237945111824,
 0.18834726254214362,
 0.13572837459111581,
 0.19866256588477826,
 0.11809598465856383,
 0.11388114828085276,
 0.16038684030582104,
 0.15195534165120328,
 0.15403407805621239,
 0.17513246877469107,
 0.12189924315672195,
 0.17291384233723806,
 0.12157842398505374,
 0.16163454349800632,
 0.10588161437747122,
 0.15933212042185127,
 0.10354295017274179,
 0.19475373407274418,
 0.17986979975993472,
 0.1959624319945274,
 0.13609857998325592,
 0.13432935939662202,
 0.18600958810152435,
 0.1081274915657692,
 0.10676401800707978,
 0.15054206085798871,
 0.15508659123395696,
 0.14225761385595073,
 0.1786232523831674,
 0.14510361084411119,
 0.1571011498193812,
 0.1903487267150446,
 0.15034413570802019,
 0.17687337700448996,
 0.17948124363682558,
 0.16397353275533233,
 0.14685357479834843,
 0.12506622194370398,
 0.15812298466290417,
 0.15112976547797499,
 0.16557719117748512,
 0.19133109297470585,
 0.13077747926687303,
 0.17499733307051979,
 0.12577797122698475,
 0.18513851918776014,
 0.15768758936038504,
 0.13317458295889534,
 0.12589603442923694]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.8284728497436025,
 [(0, 180, 221), (2, 91, 162), (7, 89, 70), (5, 49, 84), (4, 173, 155)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.8284728497436025,
 [(0, 180, 221), (2, 91, 162), (7, 89, 70), (5, 49, 84), (4, 173, 155)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.8284728497436025,
 [(0, 180, 221), (2, 91, 162), (7, 89, 70), (5, 49, 84), (4, 173, 155)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.8284728497436025,
 {(0, 180, 221): 4,
  (2, 91, 162): 4,
  (4, 173, 155): 4,
  (5, 49, 84): 4,
  (7, 89, 70): 4},
 [(0, 180, 221), (2, 91, 162), (7, 89, 70), (5, 49, 8=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 229, 182),
 (1, 47, 227),
 (2, 151, 85),
 (3, 89, 2),
 (4, 277, 253),
 (5, 53, 214),
 (6, 21, 146),
 (7, 21, 159)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 89, 145),
 (1, 222, 240),
 (2, 21, 35),
 (3, 86, 85),
 (4, 49, 35),
 (5, 226, 39),
 (6, 7, 182),
 (7, 7, 231),
 (8, 113, 192),
 (9, 229, 294),
 (10, 154, 114),
 (11, 52, 237),
 (12, 195, 288),
 (13, 110, 94),
 (14, 112, 39),
 (15, 197, 188),
 (16, 142, 254),
 (17, 275, 241),
 (18, 111, 145),
 (19, 225, 222),
 (20, 276, 64),
 (21, 53, 150),
 (22, 298, 209),
 (23, 53, 2),
 (24, 265, 112),
 (25, 176, 97),
 (26, 236, 101),
 (27, 43, 269),
 (28, 157, 166),
 (29, 138, 96),
 (30, 55, 109),
 (31, 167, 264),
 (32, 212, 8),
 (33, 223, 65),
 (34, 121, 132),
 (35, 229, 73),
 (36, 158, 271),
 (37, 152, 299),
 (38, 32, 28),
 (39, 11, 43),
 (40, 15, 286),
 (41, 290, 74),
 (42, 62, 207),
 (43, 109, 86),
 (44, 286, 61),
 (45, 142, 70),
 (46, 223, 223),
 (47, 242, 117),
 (48, 59, 162),
 (49, 152, 120)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.124224516884803,
 0.10170107922139399,
 0.13362287027301928,
 0.17512502916400927,
 0.1783644962980187,
 0.11571040148204148,
 0.18646745684485788,
 0.13770829139973967,
 0.14496793449086007,
 0.10986963449285542,
 0.1359725237260766,
 0.15516880873324396,
 0.1094720229920106,
 0.19050163731537639,
 0.10922877412383587,
 0.13300100656337296,
 0.15833913464895794,
 0.1147050886162202,
 0.1363158921091793,
 0.13111765981823995,
 0.14182936775648375,
 0.1722545361836301,
 0.14364535228854658,
 0.12925112893058091,
 0.14904998225407515,
 0.14189781852292568,
 0.12905603118422232,
 0.16635804629492681,
 0.1309040263081408,
 0.10430596543474051,
 0.19091031392796218,
 0.14806336579487159,
 0.17094953394141171,
 0.17181757307397488,
 0.18022847807175491,
 0.1511582408049591,
 0.15474686845238603,
 0.13332690285554191,
 0.14470683744902707,
 0.17731370450669975,
 0.17135433230473102,
 0.14749918710769297,
 0.16994537476305813,
 0.17887434822437281,
 0.1976297284266853,
 0.1763295086498754,
 0.1463716421246152,
 0.16369077473469612,
 0.11067324653409397,
 0.13556959286511056]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 3, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.1653533440959365,
 [(2, 151, 85), (5, 53, 214), (1, 47, 227), (0, 229, 182), (7, 21, 159)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.1274102891733269,
 [(2, 151, 85), (5, 53, 214), (1, 47, 227), (0, 229, 182), (4, 277, 253)],
 [4, 4, 4, 4, 3])
=============================================
#                solution A                 #
=============================================
(1.1653533440959365,
 [(2, 151, 85), (5, 53, 214), (1, 47, 227), (0, 229, 182), (7, 21, 159)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2784042621585765,
 {(0, 229, 182): 4, (1, 47, 227): 4, (2, 151, 85): 4, (5, 53, 214): 4},
 [(2, 151, 85),
  (5, 53, 214),
  (2, 151, 85),
  (1, 47, 227),
  (0, 229, 182),
  (=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 28, 223),
 (1, 150, 223),
 (2, 121, 266),
 (3, 239, 247),
 (4, 193, 204),
 (5, 236, 4),
 (6, 264, 293),
 (7, 94, 25)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 12, 285),
 (1, 155, 118),
 (2, 257, 284),
 (3, 45, 206),
 (4, 68, 71),
 (5, 91, 108),
 (6, 244, 247),
 (7, 132, 242),
 (8, 30, 75),
 (9, 257, 257),
 (10, 171, 200),
 (11, 1, 273),
 (12, 191, 299),
 (13, 47, 124),
 (14, 12, 148),
 (15, 263, 92),
 (16, 100, 10),
 (17, 50, 231),
 (18, 117, 63),
 (19, 146, 189),
 (20, 58, 274),
 (21, 128, 115),
 (22, 61, 97),
 (23, 238, 76),
 (24, 15, 222),
 (25, 39, 16),
 (26, 76, 159),
 (27, 126, 134),
 (28, 74, 147),
 (29, 277, 124),
 (30, 268, 285),
 (31, 187, 186),
 (32, 255, 74),
 (33, 3, 151),
 (34, 244, 56),
 (35, 39, 22),
 (36, 33, 14),
 (37, 62, 159),
 (38, 265, 263),
 (39, 205, 298),
 (40, 253, 166),
 (41, 288, 64),
 (42, 227, 258),
 (43, 131, 37),
 (44, 244, 6),
 (45, 125, 256),
 (46, 168, 160),
 (47, 126, 208),
 (48, 181, 98),
 (49, 216, 164)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.10845917819167419,
 0.18442706616806434,
 0.10061276462101933,
 0.1625625938318539,
 0.19391668528810302,
 0.1153468400712187,
 0.12288175195799328,
 0.13335594167353976,
 0.17466294907378613,
 0.19217158537257037,
 0.11417574919028053,
 0.14314711458301721,
 0.12036916149213203,
 0.16705927328486087,
 0.13016061947135502,
 0.15379554508707688,
 0.1167412924850893,
 0.19828065561000138,
 0.10818235587640113,
 0.1895165687041383,
 0.16969190956466307,
 0.14570299568443087,
 0.13697716712330332,
 0.13764109663795998,
 0.17919247861673904,
 0.12096023318235945,
 0.18494234904436946,
 0.13800497974996695,
 0.18903996333881429,
 0.18424334743758011,
 0.1347627858642011,
 0.10901336362616884,
 0.14509032481233824,
 0.15410258234853186,
 0.18492291299045566,
 0.19763605218934027,
 0.19621337339160919,
 0.15156205735657233,
 0.15206660767995467,
 0.1724560930862431,
 0.15993605581689541,
 0.1421184982923262,
 0.19051352084656317,
 0.10149504011066263,
 0.12805100686276297,
 0.15012299958678418,
 0.10625956031982348,
 0.14048920711771004,
 0.15461797481318387,
 0.15815794008525616]
=============================================
#           optimal power levels            #
=============================================
[4, 3, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.3450648820724826,
 [(3, 239, 247), (6, 264, 293), (0, 28, 223), (4, 193, 204), (7, 94, 25)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.3450648820724826,
 [(3, 239, 247), (6, 264, 293), (0, 28, 223), (4, 193, 204), (7, 94, 25)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.3450648820724826,
 [(3, 239, 247), (6, 264, 293), (0, 28, 223), (4, 193, 204), (7, 94, 25)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.4217387042188512,
 {(0, 28, 223): 4, (3, 239, 247): 4, (4, 193, 204): 4, (6, 264, 293): 4},
 [(3, 239, 247),
  (6, 264, 293),
  (0, 28, 223),
  (4, 193, 204),
  (=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 218, 161),
 (1, 154, 73),
 (2, 134, 222),
 (3, 230, 199),
 (4, 282, 86),
 (5, 109, 213),
 (6, 194, 145),
 (7, 282, 293)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 166, 105),
 (1, 154, 185),
 (2, 72, 272),
 (3, 249, 40),
 (4, 213, 123),
 (5, 299, 113),
 (6, 119, 247),
 (7, 164, 266),
 (8, 206, 288),
 (9, 110, 110),
 (10, 101, 176),
 (11, 168, 297),
 (12, 39, 174),
 (13, 193, 279),
 (14, 127, 137),
 (15, 48, 141),
 (16, 277, 54),
 (17, 165, 137),
 (18, 151, 241),
 (19, 215, 77),
 (20, 190, 106),
 (21, 57, 100),
 (22, 263, 243),
 (23, 148, 14),
 (24, 25, 9),
 (25, 177, 0),
 (26, 284, 48),
 (27, 69, 113),
 (28, 214, 53),
 (29, 196, 227),
 (30, 143, 276),
 (31, 260, 296),
 (32, 254, 1),
 (33, 85, 32),
 (34, 257, 29),
 (35, 249, 108),
 (36, 222, 234),
 (37, 73, 184),
 (38, 256, 19),
 (39, 200, 65),
 (40, 283, 297),
 (41, 236, 200),
 (42, 57, 224),
 (43, 262, 61),
 (44, 50, 81),
 (45, 77, 207),
 (46, 98, 279),
 (47, 214, 250),
 (48, 288, 118),
 (49, 176, 58)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.18426866000628273,
 0.10962492027937058,
 0.16772967627054619,
 0.19725174107318111,
 0.18989806403678622,
 0.16007421518666354,
 0.14365199828721853,
 0.10316738104659387,
 0.18570321152951116,
 0.1948173208185589,
 0.19799422210544759,
 0.14814363624328319,
 0.1956311771383919,
 0.18690882836945674,
 0.12741222916566852,
 0.14613403152576321,
 0.11212156210531381,
 0.1141452323568421,
 0.15435712148976874,
 0.11485211013567284,
 0.13816214857362757,
 0.15598681588440666,
 0.14439753091602989,
 0.12956960051870092,
 0.15466454749297801,
 0.12087794173456855,
 0.11915833782188061,
 0.13470656153656471,
 0.10602526489452593,
 0.13712289186463111,
 0.15139412654598491,
 0.19697464915133045,
 0.13655473486393813,
 0.14834705655522162,
 0.16265804875551465,
 0.15677560067077906,
 0.11728559467023797,
 0.19825263100019289,
 0.19127702926677981,
 0.14235618375572873,
 0.12478009094855448,
 0.11395558902929023,
 0.11787971770070986,
 0.1150024297312266,
 0.11808442198342892,
 0.1154279617506087,
 0.18717292731061747,
 0.10892060739930169,
 0.16642386372229911,
 0.14627651680067988]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.2093443703837421,
 [(4, 282, 86), (2, 134, 222), (5, 109, 213), (1, 154, 73), (6, 194, 145)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2093443703837421,
 [(4, 282, 86), (2, 134, 222), (5, 109, 213), (1, 154, 73), (6, 194, 145)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.2093443703837421,
 [(4, 282, 86), (2, 134, 222), (5, 109, 213), (1, 154, 73), (6, 194, 145)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2093443703837421,
 {(1, 154, 73): 4,
  (2, 134, 222): 4,
  (4, 282, 86): 4,
  (5, 109, 213): 4,
  (6, 194, 145): 4},
 [(4, 282, 86), (2, 134, 222),=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 241, 37),
 (1, 73, 143),
 (2, 77, 220),
 (3, 152, 49),
 (4, 287, 52),
 (5, 128, 297),
 (6, 84, 247),
 (7, 139, 253)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 287, 264),
 (1, 136, 285),
 (2, 207, 295),
 (3, 289, 143),
 (4, 285, 36),
 (5, 105, 140),
 (6, 23, 156),
 (7, 34, 171),
 (8, 255, 183),
 (9, 170, 144),
 (10, 41, 212),
 (11, 68, 153),
 (12, 289, 239),
 (13, 284, 266),
 (14, 265, 133),
 (15, 175, 4),
 (16, 258, 107),
 (17, 51, 280),
 (18, 114, 28),
 (19, 222, 53),
 (20, 240, 27),
 (21, 34, 25),
 (22, 10, 87),
 (23, 188, 102),
 (24, 79, 43),
 (25, 82, 140),
 (26, 175, 135),
 (27, 160, 194),
 (28, 281, 145),
 (29, 59, 240),
 (30, 168, 242),
 (31, 41, 63),
 (32, 99, 193),
 (33, 201, 114),
 (34, 98, 196),
 (35, 129, 89),
 (36, 292, 61),
 (37, 189, 199),
 (38, 68, 17),
 (39, 201, 211),
 (40, 221, 16),
 (41, 80, 33),
 (42, 124, 90),
 (43, 194, 204),
 (44, 65, 190),
 (45, 92, 51),
 (46, 76, 233),
 (47, 146, 162),
 (48, 180, 271),
 (49, 69, 234)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.12595312190080157,
 0.15018525078030664,
 0.14735782589542223,
 0.18871752527159963,
 0.12307311375489133,
 0.1989533865403787,
 0.12307518145919755,
 0.17717129247017357,
 0.13915487235516336,
 0.18479108107793743,
 0.10743505800593672,
 0.14388846620180998,
 0.19096502812735791,
 0.19667007344600584,
 0.12632673883633661,
 0.19002636769512857,
 0.10749309363708805,
 0.16429515447779516,
 0.19597462721351233,
 0.12892920662222518,
 0.12056027003920375,
 0.1367651162446617,
 0.14836860618242861,
 0.14535509073743452,
 0.11018594993195391,
 0.17864798613680144,
 0.16234176065378197,
 0.12499218730329491,
 0.11515117927149357,
 0.16669136763533432,
 0.19429013015387828,
 0.12783086555850004,
 0.1826806361299137,
 0.18913423057676815,
 0.18837441923448495,
 0.15962497928312477,
 0.17245079184984533,
 0.12558811109714299,
 0.13431399841280284,
 0.10782744322762609,
 0.10011357043962542,
 0.12526146767996865,
 0.18058794840615286,
 0.11776349866244232,
 0.11516768507325487,
 0.18683194349801147,
 0.18109883173614313,
 0.10833614295351199,
 0.14914667012492977,
 0.10938924742051015]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 3, 4]
=============================================
#           result of greedy part           #
=============================================
(1.3128800001246608,
 [(2, 77, 220), (1, 73, 143), (0, 241, 37), (7, 139, 253), (4, 287, 52)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.3080265759959344,
 [(2, 77, 220), (1, 73, 143), (6, 84, 247), (0, 241, 37), (7, 139, 253)],
 [4, 4, 3, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.3128800001246608,
 [(2, 77, 220), (1, 73, 143), (0, 241, 37), (7, 139, 253), (4, 287, 52)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.4509642136214072,
 {(0, 241, 37): 4, (1, 73, 143): 4, (2, 77, 220): 4, (6, 84, 247): 4},
 [(2, 77, 220),
  (1, 73, 143),
  (6, 84, 247),
  (2, 77, 220),
  (0, 2=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 147, 295),
 (1, 234, 215),
 (2, 29, 154),
 (3, 56, 32),
 (4, 272, 151),
 (5, 207, 0),
 (6, 17, 10),
 (7, 6, 44)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 70, 275),
 (1, 229, 39),
 (2, 58, 217),
 (3, 250, 121),
 (4, 151, 180),
 (5, 165, 110),
 (6, 47, 194),
 (7, 290, 162),
 (8, 117, 109),
 (9, 83, 171),
 (10, 36, 240),
 (11, 252, 119),
 (12, 52, 142),
 (13, 146, 229),
 (14, 243, 208),
 (15, 164, 92),
 (16, 116, 198),
 (17, 38, 0),
 (18, 1, 86),
 (19, 121, 277),
 (20, 31, 211),
 (21, 150, 239),
 (22, 6, 214),
 (23, 2, 13),
 (24, 240, 114),
 (25, 47, 286),
 (26, 217, 27),
 (27, 121, 182),
 (28, 80, 85),
 (29, 69, 203),
 (30, 60, 178),
 (31, 115, 279),
 (32, 46, 238),
 (33, 13, 133),
 (34, 293, 2),
 (35, 77, 262),
 (36, 99, 229),
 (37, 284, 26),
 (38, 161, 265),
 (39, 214, 280),
 (40, 185, 281),
 (41, 7, 234),
 (42, 274, 227),
 (43, 238, 107),
 (44, 152, 218),
 (45, 288, 243),
 (46, 83, 217),
 (47, 90, 93),
 (48, 217, 233),
 (49, 292, 256)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.10474411087813124,
 0.15547867637123269,
 0.11812488798671211,
 0.13535019033433471,
 0.1147837651492235,
 0.18452587358449241,
 0.12447002648958476,
 0.14491900298128185,
 0.14118461474900129,
 0.10903603523179628,
 0.19691271632300267,
 0.11436888167529213,
 0.13391372842862281,
 0.10263967495081623,
 0.18445217242405765,
 0.17898642473224474,
 0.19667521562721971,
 0.10183237185128531,
 0.15327483084570326,
 0.12651397062809994,
 0.18702541884161755,
 0.15755525653540803,
 0.19452023509733213,
 0.16368826009853829,
 0.1856226707058973,
 0.17351957035252452,
 0.11776665412725403,
 0.14222472578913337,
 0.1279545649366724,
 0.13091570704747307,
 0.13343786447117756,
 0.17491810450000503,
 0.16242604691388557,
 0.13539962614330048,
 0.16657379314585585,
 0.16834876764860607,
 0.1542376455031215,
 0.10810567082816133,
 0.16498285631891438,
 0.10219914673235911,
 0.12556968726131162,
 0.15936559129921346,
 0.17941740218351443,
 0.10621295398385552,
 0.11546129002343841,
 0.13940820034800122,
 0.17960741851719841,
 0.15909771261688524,
 0.16786482634813443,
 0.17436488533864447]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(0.95091074544929766,
 [(2, 29, 154), (1, 234, 215), (0, 147, 295), (4, 272, 151), (6, 17, 10)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(0.95091074544929766,
 [(2, 29, 154), (1, 234, 215), (0, 147, 295), (4, 272, 151), (6, 17, 10)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(0.95091074544929766,
 [(2, 29, 154), (1, 234, 215), (0, 147, 295), (4, 272, 151), (6, 17, 10)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.0075103452498415,
 {(0, 147, 295): 4, (1, 234, 215): 4, (2, 29, 154): 4, (4, 272, 151): 4},
 [(2, 29, 154),
  (1, 234, 215),
  (0, 147, 295),
  (4, 272, 151),
  =============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 6, 263),
 (1, 99, 31),
 (2, 47, 27),
 (3, 237, 241),
 (4, 238, 210),
 (5, 223, 91),
 (6, 274, 78),
 (7, 111, 137)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 117, 186),
 (1, 185, 123),
 (2, 217, 79),
 (3, 261, 264),
 (4, 129, 183),
 (5, 160, 64),
 (6, 141, 3),
 (7, 68, 135),
 (8, 231, 189),
 (9, 184, 4),
 (10, 112, 156),
 (11, 40, 256),
 (12, 195, 200),
 (13, 234, 158),
 (14, 222, 25),
 (15, 204, 80),
 (16, 224, 263),
 (17, 12, 51),
 (18, 280, 94),
 (19, 130, 50),
 (20, 86, 20),
 (21, 66, 255),
 (22, 90, 187),
 (23, 133, 152),
 (24, 152, 265),
 (25, 69, 249),
 (26, 196, 179),
 (27, 245, 164),
 (28, 261, 278),
 (29, 181, 187),
 (30, 71, 101),
 (31, 235, 48),
 (32, 237, 258),
 (33, 38, 298),
 (34, 102, 171),
 (35, 124, 291),
 (36, 289, 53),
 (37, 10, 241),
 (38, 128, 273),
 (39, 189, 222),
 (40, 251, 229),
 (41, 38, 6),
 (42, 145, 88),
 (43, 257, 207),
 (44, 272, 300),
 (45, 33, 291),
 (46, 4, 200),
 (47, 25, 1),
 (48, 65, 243),
 (49, 8, 201)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.11886150587913051,
 0.18644991715755307,
 0.12424705623021116,
 0.18779922352674136,
 0.17163430015484554,
 0.16906095790206438,
 0.12889026802652515,
 0.12668010027878912,
 0.1387329936180868,
 0.10812210416195439,
 0.14910323468812958,
 0.14060824299906563,
 0.19339090595916586,
 0.15571358674765301,
 0.12536925672911359,
 0.14410081356724133,
 0.14569095681062866,
 0.16068079132742477,
 0.11565325132531117,
 0.19885501220456642,
 0.14452874140138447,
 0.19081534302627007,
 0.1289084574595295,
 0.13274318185295164,
 0.1838132804943198,
 0.17436748947280128,
 0.17333592635046113,
 0.105004728911825,
 0.18049447788229425,
 0.15772617800568556,
 0.19124740148046498,
 0.17825840498695794,
 0.13711931454763787,
 0.15061456464873987,
 0.17043570580677,
 0.16757254858704007,
 0.16948139307220672,
 0.14826084435599743,
 0.17735045852491621,
 0.11226086934123732,
 0.10632018217169401,
 0.15340397503807393,
 0.1144215007927699,
 0.11241535785712392,
 0.14703592130767329,
 0.14584735672132676,
 0.12507322975880711,
 0.1609813490219803,
 0.13671263481684881,
 0.16459111235005391]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.3797560880226567,
 [(3, 237, 241), (4, 238, 210), (7, 111, 137), (5, 223, 91), (0, 6, 263)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.3797560880226567,
 [(3, 237, 241), (4, 238, 210), (7, 111, 137), (5, 223, 91), (0, 6, 263)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.3797560880226567,
 [(3, 237, 241), (4, 238, 210), (7, 111, 137), (5, 223, 91), (0, 6, 263)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.456794149613875,
 {(3, 237, 241): 4, (4, 238, 210): 4, (5, 223, 91): 4, (7, 111, 137): 4},
 [(3, 237, 241),
  (4, 238, 210),
  (7, 111, 137),
  (5, 223, 91),
  (4, 238=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 299, 178),
 (1, 52, 54),
 (2, 104, 33),
 (3, 140, 113),
 (4, 162, 78),
 (5, 53, 23),
 (6, 111, 147),
 (7, 179, 251)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 265, 144),
 (1, 252, 205),
 (2, 271, 230),
 (3, 70, 213),
 (4, 153, 48),
 (5, 86, 126),
 (6, 164, 161),
 (7, 197, 249),
 (8, 98, 82),
 (9, 224, 207),
 (10, 58, 16),
 (11, 12, 37),
 (12, 205, 105),
 (13, 230, 295),
 (14, 230, 261),
 (15, 254, 66),
 (16, 121, 210),
 (17, 11, 88),
 (18, 52, 63),
 (19, 112, 146),
 (20, 147, 176),
 (21, 103, 205),
 (22, 16, 13),
 (23, 231, 88),
 (24, 43, 249),
 (25, 176, 67),
 (26, 172, 238),
 (27, 300, 254),
 (28, 68, 255),
 (29, 73, 181),
 (30, 57, 68),
 (31, 18, 117),
 (32, 168, 276),
 (33, 101, 218),
 (34, 23, 2),
 (35, 133, 144),
 (36, 149, 238),
 (37, 93, 287),
 (38, 277, 274),
 (39, 45, 167),
 (40, 88, 98),
 (41, 156, 205),
 (42, 104, 287),
 (43, 281, 111),
 (44, 52, 127),
 (45, 271, 120),
 (46, 267, 73),
 (47, 209, 283),
 (48, 151, 279),
 (49, 244, 199)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.1221294302646766,
 0.1120036888785011,
 0.17006897144035721,
 0.1926778304727422,
 0.15724486938971949,
 0.18939449012866577,
 0.1565883992739267,
 0.10446085495899968,
 0.16195571254522589,
 0.10832589258162084,
 0.1138505181721659,
 0.11466585613060018,
 0.12573070932697886,
 0.16508415839965446,
 0.10357763325426088,
 0.10632692241658383,
 0.19709986152587838,
 0.16870046999646432,
 0.16524660029456814,
 0.14016205796295461,
 0.18163973378840464,
 0.18875986986875801,
 0.1292517353553648,
 0.16678267655593013,
 0.16026689694510457,
 0.16128679852509054,
 0.14838158787406724,
 0.19083109161840747,
 0.1714251337089589,
 0.10246267710197825,
 0.16010648176417247,
 0.16120131628124934,
 0.15692533730722846,
 0.1522221979715484,
 0.12566143226697668,
 0.17227662968871449,
 0.14331350880500432,
 0.19873344375578925,
 0.1153000031987072,
 0.10958212216726267,
 0.13429583901161435,
 0.12137637308143989,
 0.13703385547228963,
 0.17308774172721139,
 0.10606027688164396,
 0.13918918776209149,
 0.19092798546236328,
 0.15252259598455337,
 0.19747214874890193,
 0.15630202485339711]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.4831052509201497,
 [(6, 111, 147), (7, 179, 251), (1, 52, 54), (5, 53, 23), (3, 140, 113)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.4831052509201497,
 [(6, 111, 147), (7, 179, 251), (1, 52, 54), (5, 53, 23), (3, 140, 113)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.4831052509201497,
 [(6, 111, 147), (7, 179, 251), (1, 52, 54), (5, 53, 23), (3, 140, 113)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.5980049211693064,
 {(1, 52, 54): 4, (5, 53, 23): 4, (6, 111, 147): 4, (7, 179, 251): 4},
 [(6, 111, 147),
  (7, 179, 251),
  (1, 52, 54),
  (6, 111, 147),
  (5, 53=============================================
#                  args                     #
=============================================
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
=============================================
#            candidate chargers             #
=============================================
8 chargers generated:
[(0, 63, 87),
 (1, 70, 172),
 (2, 104, 51),
 (3, 250, 19),
 (4, 67, 17),
 (5, 43, 167),
 (6, 265, 266),
 (7, 105, 255)]
=============================================
#                 sensors                   #
=============================================
50 sensors generated.
[(0, 286, 205),
 (1, 22, 118),
 (2, 273, 145),
 (3, 143, 157),
 (4, 242, 238),
 (5, 121, 199),
 (6, 55, 93),
 (7, 26, 60),
 (8, 223, 118),
 (9, 64, 104),
 (10, 84, 162),
 (11, 51, 257),
 (12, 149, 8),
 (13, 202, 56),
 (14, 225, 101),
 (15, 102, 125),
 (16, 23, 176),
 (17, 41, 283),
 (18, 71, 152),
 (19, 194, 84),
 (20, 182, 101),
 (21, 235, 212),
 (22, 120, 239),
 (23, 131, 226),
 (24, 31, 101),
 (25, 98, 230),
 (26, 182, 127),
 (27, 46, 161),
 (28, 6, 184),
 (29, 0, 200),
 (30, 70, 200),
 (31, 133, 249),
 (32, 211, 293),
 (33, 60, 140),
 (34, 10, 112),
 (35, 55, 147),
 (36, 154, 65),
 (37, 193, 81),
 (38, 84, 151),
 (39, 176, 37),
 (40, 88, 173),
 (41, 68, 101),
 (42, 46, 67),
 (43, 206, 296),
 (44, 5, 285),
 (45, 133, 8),
 (46, 191, 5),
 (47, 99, 133),
 (48, 146, 144),
 (49, 22, 25)]
=============================================
#                sensor's P                 #
=============================================
50 sensor's P generated.
[0.12563725700649045,
 0.1426743578657402,
 0.15423800213622571,
 0.16475701963015033,
 0.18231830391696971,
 0.16604514298798997,
 0.16043426898513286,
 0.16461292075585496,
 0.15468787692252872,
 0.12886984444701369,
 0.19595041925529758,
 0.16300624743760778,
 0.13799232972160308,
 0.13201157476620862,
 0.19797464365747264,
 0.14678370323299822,
 0.14949290590847009,
 0.15575848188637018,
 0.17302329805995043,
 0.16048334014404531,
 0.112786690113413,
 0.1634698656464445,
 0.14771277309072575,
 0.10515581848834926,
 0.1956173780509084,
 0.11225506097968371,
 0.19387335609964837,
 0.10357685457524089,
 0.17864714047218336,
 0.19604308088675426,
 0.10329757262668032,
 0.14931385958172527,
 0.16030936860263889,
 0.128083505824025,
 0.14319845974841608,
 0.17566668568486035,
 0.11525704636309117,
 0.18336574911189141,
 0.12159721616306612,
 0.14858317192985629,
 0.16628978344640949,
 0.17440630943816063,
 0.16081176261850144,
 0.13907217684433884,
 0.12827771633514365,
 0.13338933202152048,
 0.14325614062565278,
 0.18645598112014422,
 0.19428693964311924,
 0.16982738673331932]
=============================================
#           optimal power levels            #
=============================================
[4, 4, 4, 4, 4, 4, 4, 4]
=============================================
#           result of greedy part           #
=============================================
(1.8954796701584709,
 [(1, 70, 172), (5, 43, 167), (0, 63, 87), (7, 105, 255), (2, 104, 51)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.8954796701584709,
 [(1, 70, 172), (5, 43, 167), (0, 63, 87), (7, 105, 255), (2, 104, 51)],
 [4, 4, 4, 4, 4])
=============================================
#                solution A                 #
=============================================
(1.8954796701584709,
 [(1, 70, 172), (5, 43, 167), (0, 63, 87), (7, 105, 255), (2, 104, 51)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(2.4151678208699696,
 {(0, 63, 87): 4, (1, 70, 172): 4, (5, 43, 167): 4},
 [(1, 70, 172),
  (5, 43, 167),
  (0, 63, 87),
  (5, 43, 167),
  (1, 70, 172),
  (1, 70, 172)],
 [4, 4, 43, 239, 247),
  (3, 239, 247)],
 [4, 4, 4, 4, 3, 1])
=============================================
#           result of greedy part           #
=============================================
(1.4863429573833937,
 {(0, 28, 223): 4, (3, 239, 247): 4, (6, 264, 293): 4},
 [(3, 239, 247),
  (3, 239, 247),
  (3, 239, 247),
  (6, 264, 293),
  (6, 264, 293),
  (0, 28, 223)],
 [4, 3, 2, 4, 3, 4])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.3255574991209995,
 [(3, 239, 247), (4, 193, 204), (0, 28, 223), (6, 264, 293), (2, 121, 266)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 1, 4, 0, 0, 0, 2, 0]
=============================================
#               solution Ran                #
=============================================
(0.35192230734219726,
 [(0, 28, 223), (1, 150, 223), (2, 121, 266), (6, 264, 293)],
 [1, 1, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.3450648820724826,
 [(0, 28, 223), (3, 239, 247), (4, 193, 204), (6, 264, 293), (7, 94, 25)],
 [4, 4, 4, 4, 4])
 (5, 109, 213), (1, 154, 73), (6, 194, 145)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.2123701874755999,
 {(1, 154, 73): 4,
  (2, 134, 222): 4,
  (4, 282, 86): 4,
  (5, 109, 213): 4,
  (7, 282, 293): 1},
 [(4, 282, 86),
  (2, 134, 222),
  (5, 109, 213),
  (1, 154, 73),
  (4, 282, 86),
  (7, 282, 293)],
 [4, 4, 4, 4, 3, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.1963799493541427,
 [(2, 134, 222), (1, 154, 73), (7, 282, 293), (5, 109, 213), (4, 282, 86)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[4, 1, 0, 3, 1, 0, 0, 4]
=============================================
#               solution Ran                #
=============================================
(0.49565812664867243,
 [(0, 218, 161), (1, 154, 73), (3, 230, 199), (4, 282, 86), (7, 282, 293)],
 [4, 1, 3, 1, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.2093443703837421,
 [(1, 154, 73), (2, 134, 222), (4, 282, 86), (5, 109, 213), (6, 194, 145)],
 [4, 4, 4, 4, 4])
4), (4, 173, 155)],
 [4, 4, 4, 4, 4])
=============================================
#           result of greedy part           #
=============================================
(1.8741663705221909,
 {(0, 180, 221): 4, (2, 91, 162): 4, (5, 49, 84): 4, (7, 89, 70): 4},
 [(0, 180, 221),
  (2, 91, 162),
  (7, 89, 70),
  (0, 180, 221),
  (5, 49, 84),
  (0, 180, 221)],
 [4, 4, 4, 3, 4, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.8284728497436025,
 [(2, 91, 162), (4, 173, 155), (0, 180, 221), (7, 89, 70), (5, 49, 84)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[4, 0, 4, 1, 4, 3, 1, 3]
=============================================
#               solution Ran                #
=============================================
(1.5864990920077162,
 [(0, 180, 221),
  (2, 91, 162),
  (3, 200, 27),
  (4, 173, 155),
  (5, 49, 84),
  (6, 280, 108),
  (7, 89, 70)],
 [4, 4, 1, 4, 3, 1, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.8284728497436025,
 [(0, 180, 221), (2, 91, 162), (4, 173, 155), (5, 49, 84), (7, 89, 70)],
 [4, 4, 4, 4, 4])
, 23),
  (6, 111, 147)],
 [4, 4, 4, 3, 4, 1])
=============================================
#           result of greedy part           #
=============================================
(1.6569084786575046,
 {(1, 52, 54): 4, (6, 111, 147): 4, (7, 179, 251): 4},
 [(6, 111, 147),
  (6, 111, 147),
  (7, 179, 251),
  (1, 52, 54),
  (7, 179, 251),
  (7, 179, 251)],
 [4, 3, 4, 4, 3, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.4645695573243773,
 [(5, 53, 23), (1, 52, 54), (6, 111, 147), (7, 179, 251), (4, 162, 78)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[2, 2, 0, 3, 0, 2, 3, 0]
=============================================
#               solution Ran                #
=============================================
(0.61885950323764649,
 [(0, 299, 178), (1, 52, 54), (3, 140, 113), (5, 53, 23), (6, 111, 147)],
 [2, 2, 3, 2, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.4831052509201497,
 [(1, 52, 54), (3, 140, 113), (5, 53, 23), (6, 111, 147), (7, 179, 251)],
 [4, 4, 4, 4, 4])
5, 53, 214)],
 [4, 4, 3, 4, 4, 1])
=============================================
#           result of greedy part           #
=============================================
(1.3799410982033595,
 {(1, 47, 227): 4, (2, 151, 85): 4, (5, 53, 214): 4},
 [(2, 151, 85),
  (2, 151, 85),
  (2, 151, 85),
  (5, 53, 214),
  (1, 47, 227),
  (5, 53, 214)],
 [4, 3, 2, 4, 4, 3])
Warning: remaining budget can not be full filled.
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 850.000000
=============================================
#                solution B                 #
=============================================
(0.99577721182118228,
 [(0, 229, 182), (1, 47, 227), (5, 53, 214), (2, 151, 85), (4, 277, 253)],
 [1, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 2, 0, 0, 4, 3, 3, 0]
=============================================
#               solution Ran                #
=============================================
(0.48586229566985539,
 [(0, 229, 182), (1, 47, 227), (4, 277, 253), (5, 53, 214), (6, 21, 146)],
 [1, 2, 4, 3, 3])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.1662362475545534,
 [(0, 229, 182), (1, 47, 227), (2, 151, 85), (4, 277, 253), (5, 53, 214)],
 [4, 4, 4, 4, 4])
, 210),
  (3, 237, 241)],
 [4, 4, 4, 4, 3, 1])
=============================================
#           result of greedy part           #
=============================================
(1.5044303939841375,
 {(3, 237, 241): 4, (4, 238, 210): 4, (7, 111, 137): 4},
 [(3, 237, 241),
  (4, 238, 210),
  (4, 238, 210),
  (3, 237, 241),
  (7, 111, 137),
  (3, 237, 241)],
 [4, 4, 3, 3, 4, 2])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.3470380312496957,
 [(3, 237, 241), (7, 111, 137), (1, 99, 31), (5, 223, 91), (4, 238, 210)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 2, 1, 3, 3, 1, 0, 0]
=============================================
#               solution Ran                #
=============================================
(0.55205470962465752,
 [(0, 6, 263),
  (1, 99, 31),
  (2, 47, 27),
  (3, 237, 241),
  (4, 238, 210),
  (5, 223, 91)],
 [1, 2, 1, 3, 3, 1])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.3797560880226567,
 [(0, 6, 263), (3, 237, 241), (4, 238, 210), (5, 223, 91), (7, 111, 137)],
 [4, 4, 4, 4, 4])
, 3, 3, 2])
=============================================
#           result of greedy part           #
=============================================
(2.4151678208699696,
 {(0, 63, 87): 4, (1, 70, 172): 4, (5, 43, 167): 4},
 [(1, 70, 172),
  (5, 43, 167),
  (5, 43, 167),
  (0, 63, 87),
  (1, 70, 172),
  (1, 70, 172)],
 [4, 4, 3, 4, 3, 2])
Warning: remaining budget can not be full filled.
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 850.000000
=============================================
#                solution B                 #
=============================================
(1.7383152290036763,
 [(0, 63, 87), (1, 70, 172), (2, 104, 51), (7, 105, 255), (5, 43, 167)],
 [4, 4, 1, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 4, 1, 0, 1, 1, 4, 2]
=============================================
#               solution Ran                #
=============================================
(1.0907774806363049,
 [(0, 63, 87),
  (1, 70, 172),
  (2, 104, 51),
  (4, 67, 17),
  (5, 43, 167),
  (6, 265, 266),
  (7, 105, 255)],
 [3, 4, 1, 1, 1, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.8954796701584709,
 [(0, 63, 87), (1, 70, 172), (2, 104, 51), (5, 43, 167), (7, 105, 255)],
 [4, 4, 4, 4, 4])
3, 20, 186),
  (0, 246, 239),
  (0, 246, 239)],
 [4, 4, 4, 4, 3, 1])
=============================================
#           result of greedy part           #
=============================================
(1.6174393819786501,
 {(0, 246, 239): 4, (4, 112, 145): 4, (5, 207, 231): 4},
 [(0, 246, 239),
  (0, 246, 239),
  (5, 207, 231),
  (5, 207, 231),
  (0, 246, 239),
  (4, 112, 145)],
 [4, 3, 4, 3, 2, 4])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.4911005635885572,
 [(0, 246, 239), (4, 112, 145), (5, 207, 231), (1, 187, 249), (3, 20, 186)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[1, 0, 2, 2, 0, 0, 3, 4]
=============================================
#               solution Ran                #
=============================================
(0.42313527765234993,
 [(0, 246, 239), (2, 139, 264), (3, 20, 186), (6, 25, 260), (7, 293, 249)],
 [1, 2, 2, 3, 4])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.4911005635885572,
 [(0, 246, 239), (1, 187, 249), (3, 20, 186), (4, 112, 145), (5, 207, 231)],
 [4, 4, 4, 4, 4])
41, 37),
  (1, 73, 143)],
 [4, 4, 4, 3, 4, 1])
=============================================
#           result of greedy part           #
=============================================
(1.5239980318438415,
 {(1, 73, 143): 4, (2, 77, 220): 4, (6, 84, 247): 3},
 [(2, 77, 220),
  (2, 77, 220),
  (1, 73, 143),
  (2, 77, 220),
  (1, 73, 143),
  (6, 84, 247),
  (1, 73, 143)],
 [4, 3, 4, 2, 3, 3, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(1.3579468631535698,
 [(6, 84, 247), (1, 73, 143), (2, 77, 220), (0, 241, 37), (4, 287, 52)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[4, 1, 4, 4, 1, 1, 3, 2]
=============================================
#               solution Ran                #
=============================================
(1.0735350388377585,
 [(0, 241, 37),
  (1, 73, 143),
  (2, 77, 220),
  (3, 152, 49),
  (4, 287, 52),
  (5, 128, 297),
  (6, 84, 247),
  (7, 139, 253)],
 [4, 1, 4, 4, 1, 1, 3, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(1.3725043925257023,
 [(0, 241, 37), (1, 73, 143), (2, 77, 220), (6, 84, 247), (7, 139, 253)],
 [4, 4, 4, 4, 4])
(2, 29, 154),
  (1, 234, 215)],
 [4, 4, 4, 4, 3, 1])
=============================================
#           result of greedy part           #
=============================================
(1.0075103452498415,
 {(0, 147, 295): 4, (1, 234, 215): 4, (2, 29, 154): 4, (4, 272, 151): 4},
 [(2, 29, 154),
  (1, 234, 215),
  (0, 147, 295),
  (2, 29, 154),
  (4, 272, 151),
  (1, 234, 215)],
 [4, 4, 4, 3, 4, 1])
=============================================
#       utilize the remaining budget        #
=============================================
Budget : 1000.000000
=============================================
#                solution B                 #
=============================================
(0.95091074544929766,
 [(6, 17, 10), (2, 29, 154), (1, 234, 215), (0, 147, 295), (4, 272, 151)],
 [4, 4, 4, 4, 4])
=============================================
#               random h list               #
=============================================
[3, 0, 4, 4, 3, 4, 2, 0]
=============================================
#               solution Ran                #
=============================================
(0.68203896570639722,
 [(0, 147, 295),
  (2, 29, 154),
  (3, 56, 32),
  (4, 272, 151),
  (5, 207, 0),
  (6, 17, 10)],
 [3, 4, 4, 3, 4, 2])
=============================================
#                update trace               #
=============================================
=============================================
#               solution Opt                #
=============================================
(0.95091074544929766,
 [(0, 147, 295), (1, 234, 215), (2, 29, 154), (4, 272, 151), (6, 17, 10)],
 [4, 4, 4, 4, 4])
{'B': 1000,
 'M': 50,
 'N': 8,
 'alpha': 0.64000000000000001,
 'beta': 30.0,
 'h_max': 4,
 'p_min': 50.0,
 'p_th': 0.01,
 'size': (300, 300),
 'sp_max': 0.20000000000000001,
 'sp_min': 0.10000000000000001,
 'times': 10,
 'worker': 10}
[{'A': (1.1653533440959365,
        [(2, 151, 85),
         (5, 53, 214),
         (1, 47, 227),
         (0, 229, 182),
         (7, 21, 159)],
        [4, 4, 4, 4, 4]),
  'B': (0.99577721182118228,
        [(0, 229, 182),
         (1, 47, 227),
         (5, 53, 214),
         (2, 151, 85),
         (4, 277, 253)],
        [1, 4, 4, 4, 4]),
  'Opt': (1.1662362475545534,
          [(0, 229, 182),
           (1, 47, 227),
           (2, 151, 85),
           (4, 277, 253),
           (5, 53, 214)],
          [4, 4, 4, 4, 4]),
  'Random': (0.48586229566985539,
             [(0, 229, 182),
              (1, 47, 227),
              (4, 277, 253),
              (5, 53, 214),
              (6, 21, 146)],
             [1, 2, 4, 3, 3])},
 {'A': (1.3128800001246608,
        [(2, 77, 220),
         (1, 73, 143),
         (0, 241, 37),
         (7, 139, 253),
         (4, 287, 52)],
        [4, 4, 4, 4, 4]),
  'B': (1.3579468631535698,
        [(6, 84, 247),
         (1, 73, 143),
         (2, 77, 220),
         (0, 241, 37),
         (4, 287, 52)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.3725043925257023,
          [(0, 241, 37),
           (1, 73, 143),
           (2, 77, 220),
           (6, 84, 247),
           (7, 139, 253)],
          [4, 4, 4, 4, 4]),
  'Random': (1.0735350388377585,
             [(0, 241, 37),
              (1, 73, 143),
              (2, 77, 220),
              (3, 152, 49),
              (4, 287, 52),
              (5, 128, 297),
              (6, 84, 247),
              (7, 139, 253)],
             [4, 1, 4, 4, 1, 1, 3, 2])},
 {'A': (1.3450648820724826,
        [(3, 239, 247),
         (6, 264, 293),
         (0, 28, 223),
         (4, 193, 204),
         (7, 94, 25)],
        [4, 4, 4, 4, 4]),
  'B': (1.3255574991209995,
        [(3, 239, 247),
         (4, 193, 204),
         (0, 28, 223),
         (6, 264, 293),
         (2, 121, 266)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.3450648820724826,
          [(0, 28, 223),
           (3, 239, 247),
           (4, 193, 204),
           (6, 264, 293),
           (7, 94, 25)],
          [4, 4, 4, 4, 4]),
  'Random': (0.35192230734219726,
             [(0, 28, 223), (1, 150, 223), (2, 121, 266), (6, 264, 293)],
             [1, 1, 4, 2])},
 {'A': (1.2093443703837421,
        [(4, 282, 86),
         (2, 134, 222),
         (5, 109, 213),
         (1, 154, 73),
         (6, 194, 145)],
        [4, 4, 4, 4, 4]),
  'B': (1.1963799493541427,
        [(2, 134, 222),
         (1, 154, 73),
         (7, 282, 293),
         (5, 109, 213),
         (4, 282, 86)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.2093443703837421,
          [(1, 154, 73),
           (2, 134, 222),
           (4, 282, 86),
           (5, 109, 213),
           (6, 194, 145)],
          [4, 4, 4, 4, 4]),
  'Random': (0.49565812664867243,
             [(0, 218, 161),
              (1, 154, 73),
              (3, 230, 199),
              (4, 282, 86),
              (7, 282, 293)],
             [4, 1, 3, 1, 4])},
 {'A': (1.8954796701584709,
        [(1, 70, 172),
         (5, 43, 167),
         (0, 63, 87),
         (7, 105, 255),
         (2, 104, 51)],
        [4, 4, 4, 4, 4]),
  'B': (1.7383152290036763,
        [(0, 63, 87),
         (1, 70, 172),
         (2, 104, 51),
         (7, 105, 255),
         (5, 43, 167)],
        [4, 4, 1, 4, 4]),
  'Opt': (1.8954796701584709,
          [(0, 63, 87),
           (1, 70, 172),
           (2, 104, 51),
           (5, 43, 167),
           (7, 105, 255)],
          [4, 4, 4, 4, 4]),
  'Random': (1.0907774806363049,
             [(0, 63, 87),
              (1, 70, 172),
              (2, 104, 51),
              (4, 67, 17),
              (5, 43, 167),
              (6, 265, 266),
              (7, 105, 255)],
             [3, 4, 1, 1, 1, 4, 2])},
 {'A': (1.4831052509201497,
        [(6, 111, 147),
         (7, 179, 251),
         (1, 52, 54),
         (5, 53, 23),
         (3, 140, 113)],
        [4, 4, 4, 4, 4]),
  'B': (1.4645695573243773,
        [(5, 53, 23),
         (1, 52, 54),
         (6, 111, 147),
         (7, 179, 251),
         (4, 162, 78)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.4831052509201497,
          [(1, 52, 54),
           (3, 140, 113),
           (5, 53, 23),
           (6, 111, 147),
           (7, 179, 251)],
          [4, 4, 4, 4, 4]),
  'Random': (0.61885950323764649,
             [(0, 299, 178),
              (1, 52, 54),
              (3, 140, 113),
              (5, 53, 23),
              (6, 111, 147)],
             [2, 2, 3, 2, 3])},
 {'A': (1.8284728497436025,
        [(0, 180, 221),
         (2, 91, 162),
         (7, 89, 70),
         (5, 49, 84),
         (4, 173, 155)],
        [4, 4, 4, 4, 4]),
  'B': (1.8284728497436025,
        [(2, 91, 162),
         (4, 173, 155),
         (0, 180, 221),
         (7, 89, 70),
         (5, 49, 84)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.8284728497436025,
          [(0, 180, 221),
           (2, 91, 162),
           (4, 173, 155),
           (5, 49, 84),
           (7, 89, 70)],
          [4, 4, 4, 4, 4]),
  'Random': (1.5864990920077162,
             [(0, 180, 221),
              (2, 91, 162),
              (3, 200, 27),
              (4, 173, 155),
              (5, 49, 84),
              (6, 280, 108),
              (7, 89, 70)],
             [4, 4, 1, 4, 3, 1, 3])},
 {'A': (1.4911005635885572,
        [(0, 246, 239),
         (5, 207, 231),
         (4, 112, 145),
         (3, 20, 186),
         (1, 187, 249)],
        [4, 4, 4, 4, 4]),
  'B': (1.4911005635885572,
        [(0, 246, 239),
         (4, 112, 145),
         (5, 207, 231),
         (1, 187, 249),
         (3, 20, 186)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.4911005635885572,
          [(0, 246, 239),
           (1, 187, 249),
           (3, 20, 186),
           (4, 112, 145),
           (5, 207, 231)],
          [4, 4, 4, 4, 4]),
  'Random': (0.42313527765234993,
             [(0, 246, 239),
              (2, 139, 264),
              (3, 20, 186),
              (6, 25, 260),
              (7, 293, 249)],
             [1, 2, 2, 3, 4])},
 {'A': (1.3797560880226567,
        [(3, 237, 241),
         (4, 238, 210),
         (7, 111, 137),
         (5, 223, 91),
         (0, 6, 263)],
        [4, 4, 4, 4, 4]),
  'B': (1.3470380312496957,
        [(3, 237, 241),
         (7, 111, 137),
         (1, 99, 31),
         (5, 223, 91),
         (4, 238, 210)],
        [4, 4, 4, 4, 4]),
  'Opt': (1.3797560880226567,
          [(0, 6, 263),
           (3, 237, 241),
           (4, 238, 210),
           (5, 223, 91),
           (7, 111, 137)],
          [4, 4, 4, 4, 4]),
  'Random': (0.55205470962465752,
             [(0, 6, 263),
              (1, 99, 31),
              (2, 47, 27),
              (3, 237, 241),
              (4, 238, 210),
              (5, 223, 91)],
             [1, 2, 1, 3, 3, 1])},
 {'A': (0.95091074544929766,
        [(2, 29, 154),
         (1, 234, 215),
         (0, 147, 295),
         (4, 272, 151),
         (6, 17, 10)],
        [4, 4, 4, 4, 4]),
  'B': (0.95091074544929766,
        [(6, 17, 10),
         (2, 29, 154),
         (1, 234, 215),
         (0, 147, 295),
         (4, 272, 151)],
        [4, 4, 4, 4, 4]),
  'Opt': (0.95091074544929766,
          [(0, 147, 295),
           (1, 234, 215),
           (2, 29, 154),
           (4, 272, 151),
           (6, 17, 10)],
          [4, 4, 4, 4, 4]),
  'Random': (0.68203896570639722,
             [(0, 147, 295),
              (2, 29, 154),
              (3, 56, 32),
              (4, 272, 151),
              (5, 207, 0),
              (6, 17, 10)],
             [3, 4, 4, 3, 4, 2])}]
{'A': 1.4061467764559556,
 'B': 1.3696068499809102,
 'Opt': 1.4121975060419214,
 'Random': 0.7360342797363556}
